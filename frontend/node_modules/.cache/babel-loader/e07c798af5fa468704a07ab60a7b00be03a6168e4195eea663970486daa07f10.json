{"ast":null,"code":"var _jsxFileName = \"/Applications/MAMP/htdocs/carbontradex/frontend/src/components/EthereumAccount.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from 'react';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction EthereumAccount({\n  myAccount,\n  setMyAccount,\n  accounts,\n  setAccounts\n}) {\n  _s();\n  const [error, setError] = useState('');\n  const [ethAddress, setEthAddress] = useState('');\n  // Use useEffect to automatically run connectToMetaMask when the component mounts\n  useEffect(() => {\n    connectToMetaMask();\n  }, []); // The empty dependency array ensures this runs only once when mounted\n\n  const connectToMetaMask = async () => {\n    try {\n      const ethereumAccounts = await window.ethereum.request({\n        method: 'eth_requestAccounts'\n      });\n      setAccounts(ethereumAccounts);\n      const selectedAccount = ethereumAccounts[0];\n      console.log(selectedAccount);\n      setMyAccount(selectedAccount);\n    } catch (err) {\n      if (err.code === 4001) {\n        setError('Please connect to MetaMask.');\n      } else {\n        setError(err.message);\n      }\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: connectToMetaMask,\n      children: \"Connect to MetaMask\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 30,\n      columnNumber: 13\n    }, this), myAccount && /*#__PURE__*/_jsxDEV(\"p\", {\n      children: [\"Your Ethereum account: \", myAccount]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 31,\n      columnNumber: 27\n    }, this), error && /*#__PURE__*/_jsxDEV(\"p\", {\n      children: [\"Error: \", error]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 32,\n      columnNumber: 23\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 29,\n    columnNumber: 9\n  }, this);\n}\n_s(EthereumAccount, \"pToyVeEydlOVOh/rLeWsCksf7cc=\");\n_c = EthereumAccount;\nexport default EthereumAccount;\nvar _c;\n$RefreshReg$(_c, \"EthereumAccount\");","map":{"version":3,"names":["React","useState","useEffect","jsxDEV","_jsxDEV","EthereumAccount","myAccount","setMyAccount","accounts","setAccounts","_s","error","setError","ethAddress","setEthAddress","connectToMetaMask","ethereumAccounts","window","ethereum","request","method","selectedAccount","console","log","err","code","message","children","onClick","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["/Applications/MAMP/htdocs/carbontradex/frontend/src/components/EthereumAccount.js"],"sourcesContent":["import React, { useState, useEffect } from 'react';\n\nfunction EthereumAccount({ myAccount, setMyAccount, accounts, setAccounts }) {\n    const [error, setError] = useState('');\n    const [ethAddress, setEthAddress] = useState('');\n    // Use useEffect to automatically run connectToMetaMask when the component mounts\n    useEffect(() => {\n        connectToMetaMask();\n    }, []); // The empty dependency array ensures this runs only once when mounted\n\n\n    const connectToMetaMask = async () => {\n        try {\n            const ethereumAccounts = await window.ethereum.request({ method: 'eth_requestAccounts' });\n            setAccounts(ethereumAccounts);\n            const selectedAccount = ethereumAccounts[0];\n            console.log(selectedAccount);\n            setMyAccount(selectedAccount);\n        } catch (err) {\n            if (err.code === 4001) {\n                setError('Please connect to MetaMask.');\n            } else {\n                setError(err.message);\n            }\n        }\n    };\n\n    return (\n        <div>\n            <button onClick={connectToMetaMask}>Connect to MetaMask</button>\n            {myAccount && <p>Your Ethereum account: {myAccount}</p>}\n            {error && <p>Error: {error}</p>}\n        </div>\n    );\n}\n\nexport default EthereumAccount;\n"],"mappings":";;AAAA,OAAOA,KAAK,IAAIC,QAAQ,EAAEC,SAAS,QAAQ,OAAO;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAEnD,SAASC,eAAeA,CAAC;EAAEC,SAAS;EAAEC,YAAY;EAAEC,QAAQ;EAAEC;AAAY,CAAC,EAAE;EAAAC,EAAA;EACzE,MAAM,CAACC,KAAK,EAAEC,QAAQ,CAAC,GAAGX,QAAQ,CAAC,EAAE,CAAC;EACtC,MAAM,CAACY,UAAU,EAAEC,aAAa,CAAC,GAAGb,QAAQ,CAAC,EAAE,CAAC;EAChD;EACAC,SAAS,CAAC,MAAM;IACZa,iBAAiB,CAAC,CAAC;EACvB,CAAC,EAAE,EAAE,CAAC,CAAC,CAAC;;EAGR,MAAMA,iBAAiB,GAAG,MAAAA,CAAA,KAAY;IAClC,IAAI;MACA,MAAMC,gBAAgB,GAAG,MAAMC,MAAM,CAACC,QAAQ,CAACC,OAAO,CAAC;QAAEC,MAAM,EAAE;MAAsB,CAAC,CAAC;MACzFX,WAAW,CAACO,gBAAgB,CAAC;MAC7B,MAAMK,eAAe,GAAGL,gBAAgB,CAAC,CAAC,CAAC;MAC3CM,OAAO,CAACC,GAAG,CAACF,eAAe,CAAC;MAC5Bd,YAAY,CAACc,eAAe,CAAC;IACjC,CAAC,CAAC,OAAOG,GAAG,EAAE;MACV,IAAIA,GAAG,CAACC,IAAI,KAAK,IAAI,EAAE;QACnBb,QAAQ,CAAC,6BAA6B,CAAC;MAC3C,CAAC,MAAM;QACHA,QAAQ,CAACY,GAAG,CAACE,OAAO,CAAC;MACzB;IACJ;EACJ,CAAC;EAED,oBACItB,OAAA;IAAAuB,QAAA,gBACIvB,OAAA;MAAQwB,OAAO,EAAEb,iBAAkB;MAAAY,QAAA,EAAC;IAAmB;MAAAE,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAQ,CAAC,EAC/D1B,SAAS,iBAAIF,OAAA;MAAAuB,QAAA,GAAG,yBAAuB,EAACrB,SAAS;IAAA;MAAAuB,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAI,CAAC,EACtDrB,KAAK,iBAAIP,OAAA;MAAAuB,QAAA,GAAG,SAAO,EAAChB,KAAK;IAAA;MAAAkB,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAI,CAAC;EAAA;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OAC9B,CAAC;AAEd;AAACtB,EAAA,CAhCQL,eAAe;AAAA4B,EAAA,GAAf5B,eAAe;AAkCxB,eAAeA,eAAe;AAAC,IAAA4B,EAAA;AAAAC,YAAA,CAAAD,EAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}