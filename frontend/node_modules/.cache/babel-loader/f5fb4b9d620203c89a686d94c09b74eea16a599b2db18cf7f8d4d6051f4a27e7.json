{"ast":null,"code":"var _jsxFileName = \"/Applications/MAMP/htdocs/carbontradex/frontend/src/contexts/Web3Context.js\",\n  _s = $RefreshSig$(),\n  _s2 = $RefreshSig$();\n// Web3Context.js\nimport React, { createContext, useContext, useEffect, useState } from 'react';\nimport Web3 from 'web3';\nimport CarbonCreditContract from '../contracts/artifacts/CarbonCredit.json';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst Web3Context = /*#__PURE__*/createContext();\nexport function Web3Provider({\n  children\n}) {\n  _s();\n  const [web3, setWeb3] = useState(null);\n  const [carbonCreditContract, setCarbonCreditContract] = useState(null);\n  useEffect(() => {\n    // Check if the Ethereum provider (e.g., MetaMask) is available\n    if (window.ethereum) {\n      // Request account access using eth_requestAccounts\n      window.ethereum.request({\n        method: 'eth_requestAccounts'\n      }).then(() => {\n        console.log('Connected to MetaMask');\n        setWeb3(new Web3(window.ethereum));\n      }).catch(error => {\n        console.error('User denied account access');\n      });\n    } else {\n      // Handle the case where there's no Ethereum provider available\n      console.error('No web3 provider detected. Please install MetaMask or use a dApp browser.');\n    }\n  }, []);\n  useEffect(() => {\n    if (web3) {\n      getCarbonCreditContract(web3);\n    }\n  }, [web3]);\n  const getCarbonCreditContract = async web3 => {\n    console.log(web3);\n    try {\n      const networkId = await web3.eth.net.getId();\n      console.log('networkID:', networkId);\n      const deployedNetwork = await CarbonCreditContract.networks[networkId];\n      console.log('deployed Network:', deployedNetwork);\n      if (deployedNetwork) {\n        const contractInstance = new web3.eth.Contract(CarbonCreditContract.abi, deployedNetwork.address\n        // '0x7d612A772344eEDdc6Fc1a930386ea555f999251'\n        // '0x831eb314f3a0c3e2b92ec37b32214b3db41255c0'\n        );\n\n        console.log('contractInstance:', contractInstance);\n        setCarbonCreditContract(contractInstance);\n      } else {\n        console.log('The contract is not deployed on the current network');\n      }\n    } catch (error) {\n      console.error('Error connecting to Web3', error);\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(Web3Context.Provider, {\n    value: {\n      web3,\n      carbonCreditContract\n    },\n    children: children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 64,\n    columnNumber: 9\n  }, this);\n}\n_s(Web3Provider, \"1OrCxUSl0ajPZFkOMGoYYvjduWU=\");\n_c = Web3Provider;\nexport function useWeb3() {\n  _s2();\n  return useContext(Web3Context);\n}\n_s2(useWeb3, \"gDsCjeeItUuvgOWf1v4qoK9RF6k=\");\nvar _c;\n$RefreshReg$(_c, \"Web3Provider\");","map":{"version":3,"names":["React","createContext","useContext","useEffect","useState","Web3","CarbonCreditContract","jsxDEV","_jsxDEV","Web3Context","Web3Provider","children","_s","web3","setWeb3","carbonCreditContract","setCarbonCreditContract","window","ethereum","request","method","then","console","log","catch","error","getCarbonCreditContract","networkId","eth","net","getId","deployedNetwork","networks","contractInstance","Contract","abi","address","Provider","value","fileName","_jsxFileName","lineNumber","columnNumber","_c","useWeb3","_s2","$RefreshReg$"],"sources":["/Applications/MAMP/htdocs/carbontradex/frontend/src/contexts/Web3Context.js"],"sourcesContent":["// Web3Context.js\nimport React, { createContext, useContext, useEffect, useState } from 'react';\nimport Web3 from 'web3';\nimport CarbonCreditContract from '../contracts/artifacts/CarbonCredit.json';\n\nconst Web3Context = createContext();\n\nexport function Web3Provider({ children }) {\n    const [web3, setWeb3] = useState(null);\n    const [carbonCreditContract, setCarbonCreditContract] = useState(null);\n\n    useEffect(() => {\n        // Check if the Ethereum provider (e.g., MetaMask) is available\n        if (window.ethereum) {\n\n            // Request account access using eth_requestAccounts\n            window.ethereum.request({ method: 'eth_requestAccounts' })\n                .then(() => {\n                    console.log('Connected to MetaMask');\n                    setWeb3(new Web3(window.ethereum));\n                })\n                .catch((error) => {\n                    console.error('User denied account access');\n                });\n        } else {\n            // Handle the case where there's no Ethereum provider available\n            console.error('No web3 provider detected. Please install MetaMask or use a dApp browser.');\n        }\n\n    }, []);\n\n    useEffect(() => {\n        if (web3) {\n            getCarbonCreditContract(web3);\n        }\n    }, [web3])\n\n\n    const getCarbonCreditContract = async (web3) => {\n        console.log(web3);\n        try {\n            const networkId = await web3.eth.net.getId();\n            console.log('networkID:', networkId)\n            const deployedNetwork = await CarbonCreditContract.networks[networkId];\n            console.log('deployed Network:', deployedNetwork)\n            if (deployedNetwork) {\n                const contractInstance = new web3.eth.Contract(\n                    CarbonCreditContract.abi,\n                    deployedNetwork.address\n                    // '0x7d612A772344eEDdc6Fc1a930386ea555f999251'\n                    // '0x831eb314f3a0c3e2b92ec37b32214b3db41255c0'\n                );\n                console.log('contractInstance:', contractInstance)\n                setCarbonCreditContract(contractInstance);\n            } else {\n                console.log('The contract is not deployed on the current network');\n            }\n        } catch (error) {\n            console.error('Error connecting to Web3', error);\n        }\n    }\n\n    return (\n        <Web3Context.Provider value={{ web3, carbonCreditContract }}>\n            {children}\n        </Web3Context.Provider>\n    );\n}\n\nexport function useWeb3() {\n    return useContext(Web3Context);\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}