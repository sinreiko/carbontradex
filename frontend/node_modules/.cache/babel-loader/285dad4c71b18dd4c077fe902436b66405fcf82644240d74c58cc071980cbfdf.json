{"ast":null,"code":"var _jsxFileName = \"/Applications/MAMP/htdocs/carbontradex/frontend/src/contexts/Web3Context.js\",\n  _s = $RefreshSig$(),\n  _s2 = $RefreshSig$();\n// Web3Context.js\nimport React, { createContext, useContext, useEffect, useState } from 'react';\nimport Web3 from 'web3';\nimport CarbonCreditContract from '../contracts/artifacts/CarbonCredit.json';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst Web3Context = /*#__PURE__*/createContext();\nexport function Web3Provider({\n  children\n}) {\n  _s();\n  const [web3, setWeb3] = useState(null);\n  const [carbonCreditContract, setCarbonCreditContract] = useState(null);\n  useEffect(() => {\n    // Check if the Ethereum provider (e.g., MetaMask) is available\n    if (window.ethereum) {\n      setWeb3(new Web3(window.ethereum));\n\n      // Request account access using eth_requestAccounts\n      window.ethereum.request({\n        method: 'eth_requestAccounts'\n      }).then(data => {\n        console.log('Connected to MetaMask');\n        console.log(data[0]);\n        // Now you can use the 'web3' instance\n        getCarbonCreditContract(web3);\n      }).catch(error => {\n        console.error('User denied account access');\n      });\n    } else {\n      // Handle the case where there's no Ethereum provider available\n      console.error('No web3 provider detected. Please install MetaMask or use a dApp browser.');\n    }\n  }, []);\n  const getCarbonCreditContract = async web3 => {\n    console.log(web3);\n    try {\n      const networkId = await web3.eth.net.getId();\n      console.log('networkID:', networkId);\n      // const deployedNetwork = CarbonCreditContract.networks[networkId];\n      // console.log('deployed Network:', deployedNetwork)\n      // if (deployedNetwork) {\n      const contractInstance = new web3.eth.Contract(CarbonCreditContract.abi,\n      // deployedNetwork && deployedNetwork.address\n      '0x7d612A772344eEDdc6Fc1a930386ea555f999251'\n      // '0x831eb314f3a0c3e2b92ec37b32214b3db41255c0'\n      );\n\n      console.log('contractInstance:', contractInstance);\n      setCarbonCreditContract(contractInstance);\n      // } else {\n      //     console.error('The contract is not deployed on the current network');\n      // }\n    } catch (error) {\n      console.error('Error connecting to Web3', error);\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(Web3Context.Provider, {\n    value: {\n      web3,\n      carbonCreditContract\n    },\n    children: children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 62,\n    columnNumber: 9\n  }, this);\n}\n_s(Web3Provider, \"pDiAVkpWBdHEL62Q1wd6oDf11M0=\");\n_c = Web3Provider;\nexport function useWeb3() {\n  _s2();\n  return useContext(Web3Context);\n}\n_s2(useWeb3, \"gDsCjeeItUuvgOWf1v4qoK9RF6k=\");\nvar _c;\n$RefreshReg$(_c, \"Web3Provider\");","map":{"version":3,"names":["React","createContext","useContext","useEffect","useState","Web3","CarbonCreditContract","jsxDEV","_jsxDEV","Web3Context","Web3Provider","children","_s","web3","setWeb3","carbonCreditContract","setCarbonCreditContract","window","ethereum","request","method","then","data","console","log","getCarbonCreditContract","catch","error","networkId","eth","net","getId","contractInstance","Contract","abi","Provider","value","fileName","_jsxFileName","lineNumber","columnNumber","_c","useWeb3","_s2","$RefreshReg$"],"sources":["/Applications/MAMP/htdocs/carbontradex/frontend/src/contexts/Web3Context.js"],"sourcesContent":["// Web3Context.js\nimport React, { createContext, useContext, useEffect, useState } from 'react';\nimport Web3 from 'web3';\nimport CarbonCreditContract from '../contracts/artifacts/CarbonCredit.json';\n\nconst Web3Context = createContext();\n\nexport function Web3Provider({ children }) {\n    const [web3, setWeb3] = useState(null);\n    const [carbonCreditContract, setCarbonCreditContract] = useState(null);\n\n    useEffect(() => {\n        // Check if the Ethereum provider (e.g., MetaMask) is available\n        if (window.ethereum) {\n            setWeb3(new Web3(window.ethereum));\n\n            // Request account access using eth_requestAccounts\n            window.ethereum.request({ method: 'eth_requestAccounts' })\n                .then((data) => {\n                    console.log('Connected to MetaMask');\n                    console.log(data[0]);\n                    // Now you can use the 'web3' instance\n                    getCarbonCreditContract(web3);\n                })\n                .catch((error) => {\n                    console.error('User denied account access');\n                });\n        } else {\n            // Handle the case where there's no Ethereum provider available\n            console.error('No web3 provider detected. Please install MetaMask or use a dApp browser.');\n        }\n\n    }, []);\n\n\n\n    const getCarbonCreditContract = async (web3) => {\n        console.log(web3);\n        try {\n            const networkId = await web3.eth.net.getId();\n            console.log('networkID:', networkId)\n            // const deployedNetwork = CarbonCreditContract.networks[networkId];\n            // console.log('deployed Network:', deployedNetwork)\n            // if (deployedNetwork) {\n            const contractInstance = new web3.eth.Contract(\n                CarbonCreditContract.abi,\n                // deployedNetwork && deployedNetwork.address\n                '0x7d612A772344eEDdc6Fc1a930386ea555f999251'\n                // '0x831eb314f3a0c3e2b92ec37b32214b3db41255c0'\n            );\n            console.log('contractInstance:', contractInstance)\n            setCarbonCreditContract(contractInstance);\n            // } else {\n            //     console.error('The contract is not deployed on the current network');\n            // }\n        } catch (error) {\n            console.error('Error connecting to Web3', error);\n        }\n    }\n\n    return (\n        <Web3Context.Provider value={{ web3, carbonCreditContract }}>\n            {children}\n        </Web3Context.Provider>\n    );\n}\n\nexport function useWeb3() {\n    return useContext(Web3Context);\n}\n"],"mappings":";;;AAAA;AACA,OAAOA,KAAK,IAAIC,aAAa,EAAEC,UAAU,EAAEC,SAAS,EAAEC,QAAQ,QAAQ,OAAO;AAC7E,OAAOC,IAAI,MAAM,MAAM;AACvB,OAAOC,oBAAoB,MAAM,0CAA0C;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAE5E,MAAMC,WAAW,gBAAGR,aAAa,CAAC,CAAC;AAEnC,OAAO,SAASS,YAAYA,CAAC;EAAEC;AAAS,CAAC,EAAE;EAAAC,EAAA;EACvC,MAAM,CAACC,IAAI,EAAEC,OAAO,CAAC,GAAGV,QAAQ,CAAC,IAAI,CAAC;EACtC,MAAM,CAACW,oBAAoB,EAAEC,uBAAuB,CAAC,GAAGZ,QAAQ,CAAC,IAAI,CAAC;EAEtED,SAAS,CAAC,MAAM;IACZ;IACA,IAAIc,MAAM,CAACC,QAAQ,EAAE;MACjBJ,OAAO,CAAC,IAAIT,IAAI,CAACY,MAAM,CAACC,QAAQ,CAAC,CAAC;;MAElC;MACAD,MAAM,CAACC,QAAQ,CAACC,OAAO,CAAC;QAAEC,MAAM,EAAE;MAAsB,CAAC,CAAC,CACrDC,IAAI,CAAEC,IAAI,IAAK;QACZC,OAAO,CAACC,GAAG,CAAC,uBAAuB,CAAC;QACpCD,OAAO,CAACC,GAAG,CAACF,IAAI,CAAC,CAAC,CAAC,CAAC;QACpB;QACAG,uBAAuB,CAACZ,IAAI,CAAC;MACjC,CAAC,CAAC,CACDa,KAAK,CAAEC,KAAK,IAAK;QACdJ,OAAO,CAACI,KAAK,CAAC,4BAA4B,CAAC;MAC/C,CAAC,CAAC;IACV,CAAC,MAAM;MACH;MACAJ,OAAO,CAACI,KAAK,CAAC,2EAA2E,CAAC;IAC9F;EAEJ,CAAC,EAAE,EAAE,CAAC;EAIN,MAAMF,uBAAuB,GAAG,MAAOZ,IAAI,IAAK;IAC5CU,OAAO,CAACC,GAAG,CAACX,IAAI,CAAC;IACjB,IAAI;MACA,MAAMe,SAAS,GAAG,MAAMf,IAAI,CAACgB,GAAG,CAACC,GAAG,CAACC,KAAK,CAAC,CAAC;MAC5CR,OAAO,CAACC,GAAG,CAAC,YAAY,EAAEI,SAAS,CAAC;MACpC;MACA;MACA;MACA,MAAMI,gBAAgB,GAAG,IAAInB,IAAI,CAACgB,GAAG,CAACI,QAAQ,CAC1C3B,oBAAoB,CAAC4B,GAAG;MACxB;MACA;MACA;MACJ,CAAC;;MACDX,OAAO,CAACC,GAAG,CAAC,mBAAmB,EAAEQ,gBAAgB,CAAC;MAClDhB,uBAAuB,CAACgB,gBAAgB,CAAC;MACzC;MACA;MACA;IACJ,CAAC,CAAC,OAAOL,KAAK,EAAE;MACZJ,OAAO,CAACI,KAAK,CAAC,0BAA0B,EAAEA,KAAK,CAAC;IACpD;EACJ,CAAC;EAED,oBACInB,OAAA,CAACC,WAAW,CAAC0B,QAAQ;IAACC,KAAK,EAAE;MAAEvB,IAAI;MAAEE;IAAqB,CAAE;IAAAJ,QAAA,EACvDA;EAAQ;IAAA0B,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACS,CAAC;AAE/B;AAAC5B,EAAA,CA1DeF,YAAY;AAAA+B,EAAA,GAAZ/B,YAAY;AA4D5B,OAAO,SAASgC,OAAOA,CAAA,EAAG;EAAAC,GAAA;EACtB,OAAOzC,UAAU,CAACO,WAAW,CAAC;AAClC;AAACkC,GAAA,CAFeD,OAAO;AAAA,IAAAD,EAAA;AAAAG,YAAA,CAAAH,EAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}