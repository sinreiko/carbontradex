{"ast":null,"code":"var _jsxFileName = \"/Applications/MAMP/htdocs/carbontradex/frontend/src/pages/CarbonCreditDashboard.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from 'react';\nimport web3 from '../App';\nimport carbonCreditContract from '../contracts/artifacts/CarbonCredit.json';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction CarbonCreditDashboard() {\n  _s();\n  const [transactions, setTransactions] = useState([]);\n  const [selectedAccount, setSelectedAccount] = useState('');\n  const [companyName, setCompanyName] = useState('');\n  const [creditAmount, setCreditAmount] = useState(0);\n  const [accounts, setAccounts] = useState([]);\n  useEffect(() => {\n    // Initialize the contract instance and fetch Ethereum accounts\n    if (web3) {\n      web3.eth.getAccounts().then(accs => {\n        setAccounts(accs);\n        if (accs.length > 0) {\n          setSelectedAccount(accs[0]);\n        }\n      });\n    }\n  }, []);\n  const addTransaction = async () => {\n    // In a real application, you would send a transaction to the smart contract\n    // to record the carbon credit transaction and retrieve this data from the blockchain.\n    if (!web3 || !carbonCreditContract) {\n      return;\n    }\n\n    // Convert the credit amount to the contract's required format (if needed)\n    const creditAmountWei = web3.utils.toWei(creditAmount.toString(), 'ether');\n    // Send a transaction to the smart contract to record a carbon credit transaction\n    const txResult = await carbonCreditContract.methods.issueCarbonCredits(selectedAccount, creditAmountWei).send({\n      from: selectedAccount // Use the selected Ethereum account\n    });\n\n    console.log('Transaction successful:', txResult);\n    try {\n      // In a real application, you would send a transaction to the smart contract\n      // to record the carbon credit transaction and retrieve this data from the blockchain.\n      await carbonCreditContract.methods.recordTransaction(companyName, creditAmount).send({\n        from: web3.eth.defaultAccount // Use the selected Ethereum account\n      });\n\n      const newTransaction = {\n        company: companyName,\n        credits: creditAmount,\n        timestamp: new Date().toLocaleString()\n      };\n      setTransactions([...transactions, newTransaction]);\n\n      // Clear the input fields\n      setCompanyName('');\n      setCreditAmount(0);\n    } catch (error) {\n      console.error('Error adding transaction', error);\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"carbon-trading-app\",\n    children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n      children: \"Carbon Credit Trading Dashboard\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 67,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"transaction-form\",\n      children: [/*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"text\",\n        placeholder: \"Company Name\",\n        value: companyName,\n        onChange: e => setCompanyName(e.target.value)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 69,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"number\",\n        placeholder: \"Credit Amount\",\n        value: creditAmount,\n        onChange: e => setCreditAmount(parseInt(e.target.value, 10))\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 75,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: addTransaction,\n        children: \"Add Transaction\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 81,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 68,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"transaction-list\",\n      children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n        children: \"Recent Transactions\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 84,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"ul\", {\n        children: transactions.map((transaction, index) => /*#__PURE__*/_jsxDEV(\"li\", {\n          children: [/*#__PURE__*/_jsxDEV(\"strong\", {\n            children: \"Company:\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 88,\n            columnNumber: 29\n          }, this), \" \", transaction.company, \" |\", /*#__PURE__*/_jsxDEV(\"strong\", {\n            children: \"Credits:\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 89,\n            columnNumber: 29\n          }, this), \" \", transaction.credits, \" |\", /*#__PURE__*/_jsxDEV(\"strong\", {\n            children: \"Timestamp:\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 90,\n            columnNumber: 29\n          }, this), \" \", transaction.timestamp]\n        }, index, true, {\n          fileName: _jsxFileName,\n          lineNumber: 87,\n          columnNumber: 25\n        }, this))\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 85,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 83,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 66,\n    columnNumber: 9\n  }, this);\n}\n_s(CarbonCreditDashboard, \"Cyk7jeCkaUU7nrUGbXgp3fwfYpg=\");\n_c = CarbonCreditDashboard;\nexport default CarbonCreditDashboard;\nvar _c;\n$RefreshReg$(_c, \"CarbonCreditDashboard\");","map":{"version":3,"names":["React","useState","useEffect","web3","carbonCreditContract","jsxDEV","_jsxDEV","CarbonCreditDashboard","_s","transactions","setTransactions","selectedAccount","setSelectedAccount","companyName","setCompanyName","creditAmount","setCreditAmount","accounts","setAccounts","eth","getAccounts","then","accs","length","addTransaction","creditAmountWei","utils","toWei","toString","txResult","methods","issueCarbonCredits","send","from","console","log","recordTransaction","defaultAccount","newTransaction","company","credits","timestamp","Date","toLocaleString","error","className","children","fileName","_jsxFileName","lineNumber","columnNumber","type","placeholder","value","onChange","e","target","parseInt","onClick","map","transaction","index","_c","$RefreshReg$"],"sources":["/Applications/MAMP/htdocs/carbontradex/frontend/src/pages/CarbonCreditDashboard.js"],"sourcesContent":["import React, { useState, useEffect } from 'react';\nimport web3 from '../App';\nimport carbonCreditContract from '../contracts/artifacts/CarbonCredit.json'\nfunction CarbonCreditDashboard() {\n    const [transactions, setTransactions] = useState([]);\n    const [selectedAccount, setSelectedAccount] = useState('');\n    const [companyName, setCompanyName] = useState('');\n    const [creditAmount, setCreditAmount] = useState(0);\n    const [accounts, setAccounts] = useState([]);\n\n    useEffect(() => {\n        // Initialize the contract instance and fetch Ethereum accounts\n        if (web3) {\n\n\n            web3.eth.getAccounts().then((accs) => {\n                setAccounts(accs);\n                if (accs.length > 0) {\n                    setSelectedAccount(accs[0]);\n                }\n            });\n        }\n    }, []);\n\n    const addTransaction = async () => {\n        // In a real application, you would send a transaction to the smart contract\n        // to record the carbon credit transaction and retrieve this data from the blockchain.\n        if (!web3 || !carbonCreditContract) {\n            return;\n        }\n\n        // Convert the credit amount to the contract's required format (if needed)\n        const creditAmountWei = web3.utils.toWei(creditAmount.toString(), 'ether');\n        // Send a transaction to the smart contract to record a carbon credit transaction\n        const txResult = await carbonCreditContract.methods\n            .issueCarbonCredits(selectedAccount, creditAmountWei)\n            .send({\n                from: selectedAccount, // Use the selected Ethereum account\n            });\n\n        console.log('Transaction successful:', txResult);\n        try {\n            // In a real application, you would send a transaction to the smart contract\n            // to record the carbon credit transaction and retrieve this data from the blockchain.\n            await carbonCreditContract.methods.recordTransaction(companyName, creditAmount).send({\n                from: web3.eth.defaultAccount, // Use the selected Ethereum account\n            });\n\n            const newTransaction = {\n                company: companyName,\n                credits: creditAmount,\n                timestamp: new Date().toLocaleString(),\n            };\n\n            setTransactions([...transactions, newTransaction]);\n\n            // Clear the input fields\n            setCompanyName('');\n            setCreditAmount(0);\n        } catch (error) {\n            console.error('Error adding transaction', error);\n        }\n    };\n\n    return (\n        <div className=\"carbon-trading-app\">\n            <h1>Carbon Credit Trading Dashboard</h1>\n            <div className=\"transaction-form\">\n                <input\n                    type=\"text\"\n                    placeholder=\"Company Name\"\n                    value={companyName}\n                    onChange={(e) => setCompanyName(e.target.value)}\n                />\n                <input\n                    type=\"number\"\n                    placeholder=\"Credit Amount\"\n                    value={creditAmount}\n                    onChange={(e) => setCreditAmount(parseInt(e.target.value, 10))}\n                />\n                <button onClick={addTransaction}>Add Transaction</button>\n            </div>\n            <div className=\"transaction-list\">\n                <h2>Recent Transactions</h2>\n                <ul>\n                    {transactions.map((transaction, index) => (\n                        <li key={index}>\n                            <strong>Company:</strong> {transaction.company} |\n                            <strong>Credits:</strong> {transaction.credits} |\n                            <strong>Timestamp:</strong> {transaction.timestamp}\n                        </li>\n                    ))}\n                </ul>\n            </div>\n        </div>\n    );\n}\n\nexport default CarbonCreditDashboard;"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}