{"ast":null,"code":"var _jsxFileName = \"/Applications/MAMP/htdocs/carbontradex/frontend/src/pages/CarbonCreditDashboard.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from 'react';\nimport web3 from '../App';\nimport carbonCreditContract from '../contracts/artifacts/CarbonCredit.json';\nimport EthereumAccount, { accounts } from '../components/EthereumAccount';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction CarbonCreditDashboard() {\n  _s();\n  const [transactions, setTransactions] = useState([]);\n  const [selectedAccount, setSelectedAccount] = useState('');\n  const [companyName, setCompanyName] = useState('');\n  const [creditAmount, setCreditAmount] = useState(0);\n  const addTransaction = async () => {\n    // In a real application, you would send a transaction to the smart contract\n    // to record the carbon credit transaction and retrieve this data from the blockchain.\n    console.log(web3);\n    if (!web3 || !carbonCreditContract) {\n      return;\n    }\n    try {\n      // Convert the credit amount to the contract's required format (if needed)\n      const creditAmountWei = web3.utils.toWei(creditAmount.toString(), 'ether');\n      // Send a transaction to the smart contract to record a carbon credit transaction\n      const txResult = await carbonCreditContract.methods.issueCarbonCredits(selectedAccount, creditAmountWei).send({\n        from: selectedAccount // Use the selected Ethereum account\n      });\n\n      console.log('Transaction successful:', txResult);\n      const newTransaction = {\n        company: companyName,\n        credits: creditAmount,\n        timestamp: new Date().toLocaleString()\n      };\n      setTransactions([...transactions, newTransaction]);\n\n      // Clear the input fields\n      setCompanyName('');\n      setCreditAmount(0);\n    } catch (error) {\n      console.error('Error adding transaction', error);\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"carbon-trading-app\",\n    children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n      children: \"Carbon Credit Trading Dashboard\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 50,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"transaction-form\",\n      children: [/*#__PURE__*/_jsxDEV(\"label\", {\n        children: \"Select Company Account:\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 52,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"select\", {\n        type: \"text\",\n        placeholder: \"Company Name\",\n        value: selectedAccount,\n        onChange: e => setSelectedAccount(e.target.value),\n        children: accounts.map(account => /*#__PURE__*/_jsxDEV(\"option\", {\n          value: account,\n          children: account\n        }, account, false, {\n          fileName: _jsxFileName,\n          lineNumber: 60,\n          columnNumber: 25\n        }, this))\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 53,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"number\",\n        placeholder: \"Credit Amount\",\n        value: creditAmount,\n        onChange: e => setCreditAmount(parseInt(e.target.value, 10))\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 65,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: addTransaction,\n        children: \"Add Transaction\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 71,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 51,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"transaction-list\",\n      children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n        children: \"Recent Transactions\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 74,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"ul\", {\n        children: transactions.map((transaction, index) => /*#__PURE__*/_jsxDEV(\"li\", {\n          children: [/*#__PURE__*/_jsxDEV(\"strong\", {\n            children: \"Company:\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 78,\n            columnNumber: 29\n          }, this), \" \", transaction.company, \" |\", /*#__PURE__*/_jsxDEV(\"strong\", {\n            children: \"Credits:\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 79,\n            columnNumber: 29\n          }, this), \" \", transaction.credits, \" |\", /*#__PURE__*/_jsxDEV(\"strong\", {\n            children: \"Timestamp:\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 80,\n            columnNumber: 29\n          }, this), \" \", transaction.timestamp]\n        }, index, true, {\n          fileName: _jsxFileName,\n          lineNumber: 77,\n          columnNumber: 25\n        }, this))\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 75,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 73,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 49,\n    columnNumber: 9\n  }, this);\n}\n_s(CarbonCreditDashboard, \"C7+m35yyntZAP7cYrBQ81YI0KXw=\");\n_c = CarbonCreditDashboard;\nexport default CarbonCreditDashboard;\nvar _c;\n$RefreshReg$(_c, \"CarbonCreditDashboard\");","map":{"version":3,"names":["React","useState","useEffect","web3","carbonCreditContract","EthereumAccount","accounts","jsxDEV","_jsxDEV","CarbonCreditDashboard","_s","transactions","setTransactions","selectedAccount","setSelectedAccount","companyName","setCompanyName","creditAmount","setCreditAmount","addTransaction","console","log","creditAmountWei","utils","toWei","toString","txResult","methods","issueCarbonCredits","send","from","newTransaction","company","credits","timestamp","Date","toLocaleString","error","className","children","fileName","_jsxFileName","lineNumber","columnNumber","type","placeholder","value","onChange","e","target","map","account","parseInt","onClick","transaction","index","_c","$RefreshReg$"],"sources":["/Applications/MAMP/htdocs/carbontradex/frontend/src/pages/CarbonCreditDashboard.js"],"sourcesContent":["import React, { useState, useEffect } from 'react';\nimport web3 from '../App';\nimport carbonCreditContract from '../contracts/artifacts/CarbonCredit.json'\nimport EthereumAccount, { accounts } from '../components/EthereumAccount';\nfunction CarbonCreditDashboard() {\n    const [transactions, setTransactions] = useState([]);\n    const [selectedAccount, setSelectedAccount] = useState('');\n    const [companyName, setCompanyName] = useState('');\n    const [creditAmount, setCreditAmount] = useState(0);\n\n    const addTransaction = async () => {\n        // In a real application, you would send a transaction to the smart contract\n        // to record the carbon credit transaction and retrieve this data from the blockchain.\n        console.log(web3);\n        if (!web3 || !carbonCreditContract) {\n            return;\n        }\n\n\n        try {\n            // Convert the credit amount to the contract's required format (if needed)\n            const creditAmountWei = web3.utils.toWei(creditAmount.toString(), 'ether');\n            // Send a transaction to the smart contract to record a carbon credit transaction\n            const txResult = await carbonCreditContract.methods\n                .issueCarbonCredits(selectedAccount, creditAmountWei)\n                .send({\n                    from: selectedAccount, // Use the selected Ethereum account\n                });\n\n            console.log('Transaction successful:', txResult);\n\n            const newTransaction = {\n                company: companyName,\n                credits: creditAmount,\n                timestamp: new Date().toLocaleString(),\n            };\n\n            setTransactions([...transactions, newTransaction]);\n\n            // Clear the input fields\n            setCompanyName('');\n            setCreditAmount(0);\n        } catch (error) {\n            console.error('Error adding transaction', error);\n        }\n    };\n\n    return (\n        <div className=\"carbon-trading-app\">\n            <h1>Carbon Credit Trading Dashboard</h1>\n            <div className=\"transaction-form\">\n                <label>Select Company Account:</label>\n                <select\n                    type=\"text\"\n                    placeholder=\"Company Name\"\n                    value={selectedAccount}\n                    onChange={(e) => setSelectedAccount(e.target.value)}\n                >\n                    {accounts.map((account) => (\n                        <option key={account} value={account}>\n                            {account}\n                        </option>\n                    ))}\n                </select>\n                <input\n                    type=\"number\"\n                    placeholder=\"Credit Amount\"\n                    value={creditAmount}\n                    onChange={(e) => setCreditAmount(parseInt(e.target.value, 10))}\n                />\n                <button onClick={addTransaction}>Add Transaction</button>\n            </div>\n            <div className=\"transaction-list\">\n                <h2>Recent Transactions</h2>\n                <ul>\n                    {transactions.map((transaction, index) => (\n                        <li key={index}>\n                            <strong>Company:</strong> {transaction.company} |\n                            <strong>Credits:</strong> {transaction.credits} |\n                            <strong>Timestamp:</strong> {transaction.timestamp}\n                        </li>\n                    ))}\n                </ul>\n            </div>\n        </div >\n    );\n}\n\nexport default CarbonCreditDashboard;"],"mappings":";;AAAA,OAAOA,KAAK,IAAIC,QAAQ,EAAEC,SAAS,QAAQ,OAAO;AAClD,OAAOC,IAAI,MAAM,QAAQ;AACzB,OAAOC,oBAAoB,MAAM,0CAA0C;AAC3E,OAAOC,eAAe,IAAIC,QAAQ,QAAQ,+BAA+B;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAC1E,SAASC,qBAAqBA,CAAA,EAAG;EAAAC,EAAA;EAC7B,MAAM,CAACC,YAAY,EAAEC,eAAe,CAAC,GAAGX,QAAQ,CAAC,EAAE,CAAC;EACpD,MAAM,CAACY,eAAe,EAAEC,kBAAkB,CAAC,GAAGb,QAAQ,CAAC,EAAE,CAAC;EAC1D,MAAM,CAACc,WAAW,EAAEC,cAAc,CAAC,GAAGf,QAAQ,CAAC,EAAE,CAAC;EAClD,MAAM,CAACgB,YAAY,EAAEC,eAAe,CAAC,GAAGjB,QAAQ,CAAC,CAAC,CAAC;EAEnD,MAAMkB,cAAc,GAAG,MAAAA,CAAA,KAAY;IAC/B;IACA;IACAC,OAAO,CAACC,GAAG,CAAClB,IAAI,CAAC;IACjB,IAAI,CAACA,IAAI,IAAI,CAACC,oBAAoB,EAAE;MAChC;IACJ;IAGA,IAAI;MACA;MACA,MAAMkB,eAAe,GAAGnB,IAAI,CAACoB,KAAK,CAACC,KAAK,CAACP,YAAY,CAACQ,QAAQ,CAAC,CAAC,EAAE,OAAO,CAAC;MAC1E;MACA,MAAMC,QAAQ,GAAG,MAAMtB,oBAAoB,CAACuB,OAAO,CAC9CC,kBAAkB,CAACf,eAAe,EAAES,eAAe,CAAC,CACpDO,IAAI,CAAC;QACFC,IAAI,EAAEjB,eAAe,CAAE;MAC3B,CAAC,CAAC;;MAENO,OAAO,CAACC,GAAG,CAAC,yBAAyB,EAAEK,QAAQ,CAAC;MAEhD,MAAMK,cAAc,GAAG;QACnBC,OAAO,EAAEjB,WAAW;QACpBkB,OAAO,EAAEhB,YAAY;QACrBiB,SAAS,EAAE,IAAIC,IAAI,CAAC,CAAC,CAACC,cAAc,CAAC;MACzC,CAAC;MAEDxB,eAAe,CAAC,CAAC,GAAGD,YAAY,EAAEoB,cAAc,CAAC,CAAC;;MAElD;MACAf,cAAc,CAAC,EAAE,CAAC;MAClBE,eAAe,CAAC,CAAC,CAAC;IACtB,CAAC,CAAC,OAAOmB,KAAK,EAAE;MACZjB,OAAO,CAACiB,KAAK,CAAC,0BAA0B,EAAEA,KAAK,CAAC;IACpD;EACJ,CAAC;EAED,oBACI7B,OAAA;IAAK8B,SAAS,EAAC,oBAAoB;IAAAC,QAAA,gBAC/B/B,OAAA;MAAA+B,QAAA,EAAI;IAA+B;MAAAC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAI,CAAC,eACxCnC,OAAA;MAAK8B,SAAS,EAAC,kBAAkB;MAAAC,QAAA,gBAC7B/B,OAAA;QAAA+B,QAAA,EAAO;MAAuB;QAAAC,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAO,CAAC,eACtCnC,OAAA;QACIoC,IAAI,EAAC,MAAM;QACXC,WAAW,EAAC,cAAc;QAC1BC,KAAK,EAAEjC,eAAgB;QACvBkC,QAAQ,EAAGC,CAAC,IAAKlC,kBAAkB,CAACkC,CAAC,CAACC,MAAM,CAACH,KAAK,CAAE;QAAAP,QAAA,EAEnDjC,QAAQ,CAAC4C,GAAG,CAAEC,OAAO,iBAClB3C,OAAA;UAAsBsC,KAAK,EAAEK,OAAQ;UAAAZ,QAAA,EAChCY;QAAO,GADCA,OAAO;UAAAX,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAEZ,CACX;MAAC;QAAAH,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OACE,CAAC,eACTnC,OAAA;QACIoC,IAAI,EAAC,QAAQ;QACbC,WAAW,EAAC,eAAe;QAC3BC,KAAK,EAAE7B,YAAa;QACpB8B,QAAQ,EAAGC,CAAC,IAAK9B,eAAe,CAACkC,QAAQ,CAACJ,CAAC,CAACC,MAAM,CAACH,KAAK,EAAE,EAAE,CAAC;MAAE;QAAAN,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAClE,CAAC,eACFnC,OAAA;QAAQ6C,OAAO,EAAElC,cAAe;QAAAoB,QAAA,EAAC;MAAe;QAAAC,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAQ,CAAC;IAAA;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OACxD,CAAC,eACNnC,OAAA;MAAK8B,SAAS,EAAC,kBAAkB;MAAAC,QAAA,gBAC7B/B,OAAA;QAAA+B,QAAA,EAAI;MAAmB;QAAAC,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAI,CAAC,eAC5BnC,OAAA;QAAA+B,QAAA,EACK5B,YAAY,CAACuC,GAAG,CAAC,CAACI,WAAW,EAAEC,KAAK,kBACjC/C,OAAA;UAAA+B,QAAA,gBACI/B,OAAA;YAAA+B,QAAA,EAAQ;UAAQ;YAAAC,QAAA,EAAAC,YAAA;YAAAC,UAAA;YAAAC,YAAA;UAAA,OAAQ,CAAC,KAAC,EAACW,WAAW,CAACtB,OAAO,EAAC,IAC/C,eAAAxB,OAAA;YAAA+B,QAAA,EAAQ;UAAQ;YAAAC,QAAA,EAAAC,YAAA;YAAAC,UAAA;YAAAC,YAAA;UAAA,OAAQ,CAAC,KAAC,EAACW,WAAW,CAACrB,OAAO,EAAC,IAC/C,eAAAzB,OAAA;YAAA+B,QAAA,EAAQ;UAAU;YAAAC,QAAA,EAAAC,YAAA;YAAAC,UAAA;YAAAC,YAAA;UAAA,OAAQ,CAAC,KAAC,EAACW,WAAW,CAACpB,SAAS;QAAA,GAH7CqB,KAAK;UAAAf,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAIV,CACP;MAAC;QAAAH,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OACF,CAAC;IAAA;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OACJ,CAAC;EAAA;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACJ,CAAC;AAEf;AAACjC,EAAA,CAlFQD,qBAAqB;AAAA+C,EAAA,GAArB/C,qBAAqB;AAoF9B,eAAeA,qBAAqB;AAAC,IAAA+C,EAAA;AAAAC,YAAA,CAAAD,EAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}