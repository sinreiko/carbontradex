{"ast":null,"code":"var _jsxFileName = \"/Applications/MAMP/htdocs/carbontradex/frontend/src/pages/CarbonCreditDashboard.js\",\n  _s = $RefreshSig$();\nimport React, { useState } from 'react';\nimport { useWeb3 } from '../contexts/Web3Context';\nimport EthereumAccount from '../components/EthereumAccount';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nfunction CarbonCreditDashboard() {\n  _s();\n  const [transactions, setTransactions] = useState([]);\n  const [selectedAccount, setSelectedAccount] = useState('');\n  const [creditAmount, setCreditAmount] = useState(0);\n  const [accounts, setAccounts] = useState([]);\n  const [accountHolder, setAccountHolder] = useState('');\n  const [accountBalance, setAccountBalance] = useState('');\n  const {\n    web3,\n    carbonCreditContract\n  } = useWeb3();\n  const etherToWei = ether => {\n    return ether * 10 ** 18;\n  };\n  const issueCarbonCredits = async () => {\n    // In a real application, you would send a transaction to the smart contract\n    // to record the carbon credit transaction and retrieve this data from the blockchain.\n    if (!web3 || !carbonCreditContract) {\n      console.log(web3);\n      console.log(carbonCreditContract);\n      console.log('no web3 or carbonCreditContract detected');\n      return;\n    }\n    try {\n      // Convert the credit amount to the contract's required format (if needed)\n      // const creditAmountWei = etherToWei(creditAmount.toString(), 'ether');\n      console.log(accountHolder);\n      console.log(selectedAccount);\n      if (web3.utils.toChecksumAddress(accountHolder) === web3.utils.toChecksumAddress(selectedAccount)) {\n        // Send a transaction to the smart contract to record a carbon credit transaction\n        const txResult = await carbonCreditContract.methods.issueCarbonCredits(selectedAccount, creditAmount).send({\n          from: selectedAccount // Use the selected Ethereum account\n        });\n\n        console.log('Carbon credits issued:', txResult);\n      } else {\n        console.error('Only the account holder can issue carbon credits');\n      }\n      const newTransaction = {\n        address: selectedAccount,\n        credits: creditAmount,\n        timestamp: new Date().toLocaleString()\n      };\n      setTransactions([...transactions, newTransaction]);\n\n      // Clear the input fields\n      setCreditAmount(0);\n    } catch (error) {\n      console.error('Error adding transaction', error);\n    }\n  };\n  const getCreditBalance = async () => {\n    if (!web3 || !carbonCreditContract) {\n      return;\n    }\n    try {\n      const creditBalance = await carbonCreditContract.methods.getCarbonCredits(selectedAccount).call();\n      console.log('Get Credits Balance:', creditBalance);\n      setAccountBalance(creditBalance);\n    } catch (error) {\n      console.error('Error getting credit balance', error);\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"carbon-trading-app\",\n    children: [/*#__PURE__*/_jsxDEV(EthereumAccount, {\n      myAccount: accountHolder,\n      setMyAccount: setAccountHolder,\n      account: selectedAccount,\n      accounts: accounts,\n      setAccount: setSelectedAccount,\n      setAccounts: setAccounts\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 79,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"h1\", {\n      children: \"Carbon Credit Trading Dashboard\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 81,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"transaction-form\",\n      children: [/*#__PURE__*/_jsxDEV(\"label\", {\n        children: \"Select Company Account:\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 83,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"select\", {\n        type: \"text\",\n        placeholder: \"Company Name\",\n        value: selectedAccount,\n        onChange: e => setSelectedAccount(e.target.value),\n        children: accounts != null ? accounts.map(account => /*#__PURE__*/_jsxDEV(\"option\", {\n          value: account,\n          children: account\n        }, account, false, {\n          fileName: _jsxFileName,\n          lineNumber: 92,\n          columnNumber: 29\n        }, this)) : /*#__PURE__*/_jsxDEV(_Fragment, {}, void 0, false)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 84,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"number\",\n        placeholder: \"Credit Amount\",\n        value: creditAmount,\n        onChange: e => setCreditAmount(parseInt(e.target.value, 10))\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 98,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: issueCarbonCredits,\n        children: \"Issue Carbon Credits\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 104,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: getCreditBalance,\n        children: \"Get Credit Balance\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 105,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 82,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"transaction-list\",\n      children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n        children: \"Recent Transactions\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 108,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"ul\", {\n        children: transactions.map((transaction, index) => /*#__PURE__*/_jsxDEV(\"li\", {\n          children: [/*#__PURE__*/_jsxDEV(\"strong\", {\n            children: \"Company:\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 112,\n            columnNumber: 29\n          }, this), \" \", transaction.company, \" |\", /*#__PURE__*/_jsxDEV(\"strong\", {\n            children: \"Credits:\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 113,\n            columnNumber: 29\n          }, this), \" \", transaction.credits, \" |\", /*#__PURE__*/_jsxDEV(\"strong\", {\n            children: \"Timestamp:\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 114,\n            columnNumber: 29\n          }, this), \" \", transaction.timestamp]\n        }, index, true, {\n          fileName: _jsxFileName,\n          lineNumber: 111,\n          columnNumber: 25\n        }, this))\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 109,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 107,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"credit-balance\",\n      children: /*#__PURE__*/_jsxDEV(\"p\", {\n        children: [\"Credit Balance: \", accountBalance]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 120,\n        columnNumber: 17\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 119,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 78,\n    columnNumber: 9\n  }, this);\n}\n_s(CarbonCreditDashboard, \"cEVWsYlUFQM8Gl5uRcSNH4zed5w=\", false, function () {\n  return [useWeb3];\n});\n_c = CarbonCreditDashboard;\nexport default CarbonCreditDashboard;\nvar _c;\n$RefreshReg$(_c, \"CarbonCreditDashboard\");","map":{"version":3,"names":["React","useState","useWeb3","EthereumAccount","jsxDEV","_jsxDEV","Fragment","_Fragment","CarbonCreditDashboard","_s","transactions","setTransactions","selectedAccount","setSelectedAccount","creditAmount","setCreditAmount","accounts","setAccounts","accountHolder","setAccountHolder","accountBalance","setAccountBalance","web3","carbonCreditContract","etherToWei","ether","issueCarbonCredits","console","log","utils","toChecksumAddress","txResult","methods","send","from","error","newTransaction","address","credits","timestamp","Date","toLocaleString","getCreditBalance","creditBalance","getCarbonCredits","call","className","children","myAccount","setMyAccount","account","setAccount","fileName","_jsxFileName","lineNumber","columnNumber","type","placeholder","value","onChange","e","target","map","parseInt","onClick","transaction","index","company","_c","$RefreshReg$"],"sources":["/Applications/MAMP/htdocs/carbontradex/frontend/src/pages/CarbonCreditDashboard.js"],"sourcesContent":["import React, { useState } from 'react';\nimport { useWeb3 } from '../contexts/Web3Context';\nimport EthereumAccount from '../components/EthereumAccount';\n\nfunction CarbonCreditDashboard() {\n    const [transactions, setTransactions] = useState([]);\n    const [selectedAccount, setSelectedAccount] = useState('');\n    const [creditAmount, setCreditAmount] = useState(0);\n    const [accounts, setAccounts] = useState([]);\n    const [accountHolder, setAccountHolder] = useState('');\n    const [accountBalance, setAccountBalance] = useState('');\n    const { web3, carbonCreditContract } = useWeb3();\n\n    const etherToWei = (ether) => {\n        return ether * 10 ** 18;\n    }\n\n    const issueCarbonCredits = async () => {\n        // In a real application, you would send a transaction to the smart contract\n        // to record the carbon credit transaction and retrieve this data from the blockchain.\n        if (!web3 || !carbonCreditContract) {\n            console.log(web3);\n            console.log(carbonCreditContract);\n            console.log('no web3 or carbonCreditContract detected');\n            return;\n        }\n\n        try {\n            // Convert the credit amount to the contract's required format (if needed)\n            // const creditAmountWei = etherToWei(creditAmount.toString(), 'ether');\n            console.log(accountHolder);\n            console.log(selectedAccount);\n            if (web3.utils.toChecksumAddress(accountHolder) === web3.utils.toChecksumAddress(selectedAccount)) {\n\n                // Send a transaction to the smart contract to record a carbon credit transaction\n                const txResult = await carbonCreditContract.methods\n                    .issueCarbonCredits(selectedAccount, creditAmount)\n                    .send({\n                        from: selectedAccount, // Use the selected Ethereum account\n                    });\n\n                console.log('Carbon credits issued:', txResult);\n\n            } else {\n                console.error('Only the account holder can issue carbon credits');\n            }\n            const newTransaction = {\n                address: selectedAccount,\n                credits: creditAmount,\n                timestamp: new Date().toLocaleString(),\n            };\n\n            setTransactions([...transactions, newTransaction]);\n\n            // Clear the input fields\n            setCreditAmount(0);\n        } catch (error) {\n            console.error('Error adding transaction', error);\n        }\n    };\n\n    const getCreditBalance = async () => {\n        if (!web3 || !carbonCreditContract) {\n            return;\n        }\n\n        try {\n            const creditBalance = await carbonCreditContract.methods\n                .getCarbonCredits(selectedAccount)\n                .call()\n            console.log('Get Credits Balance:', creditBalance);\n            setAccountBalance(creditBalance);\n        } catch (error) {\n            console.error('Error getting credit balance', error);\n        }\n    }\n    return (\n        <div className=\"carbon-trading-app\">\n            <EthereumAccount myAccount={accountHolder} setMyAccount={setAccountHolder} account={selectedAccount} accounts={accounts} setAccount={setSelectedAccount} setAccounts={setAccounts} />\n\n            <h1>Carbon Credit Trading Dashboard</h1>\n            <div className=\"transaction-form\">\n                <label>Select Company Account:</label>\n                <select\n                    type=\"text\"\n                    placeholder=\"Company Name\"\n                    value={selectedAccount}\n                    onChange={(e) => setSelectedAccount(e.target.value)}\n                >\n                    {accounts != null ?\n                        accounts.map((account) => (\n                            <option key={account} value={account}>\n                                {account}\n                            </option>\n                        )) : <></>}\n\n                </select>\n                <input\n                    type=\"number\"\n                    placeholder=\"Credit Amount\"\n                    value={creditAmount}\n                    onChange={(e) => setCreditAmount(parseInt(e.target.value, 10))}\n                />\n                <button onClick={issueCarbonCredits}>Issue Carbon Credits</button>\n                <button onClick={getCreditBalance}>Get Credit Balance</button>\n            </div>\n            <div className=\"transaction-list\">\n                <h2>Recent Transactions</h2>\n                <ul>\n                    {transactions.map((transaction, index) => (\n                        <li key={index}>\n                            <strong>Company:</strong> {transaction.company} |\n                            <strong>Credits:</strong> {transaction.credits} |\n                            <strong>Timestamp:</strong> {transaction.timestamp}\n                        </li>\n                    ))}\n                </ul>\n            </div>\n            <div className=\"credit-balance\">\n                <p>Credit Balance: {accountBalance}</p>\n            </div>\n        </div >\n    );\n}\n\nexport default CarbonCreditDashboard;"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}