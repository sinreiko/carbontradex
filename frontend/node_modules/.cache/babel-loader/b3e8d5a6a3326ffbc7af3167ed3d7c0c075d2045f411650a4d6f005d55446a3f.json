{"ast":null,"code":"var _jsxFileName = \"/Applications/MAMP/htdocs/carbontradex/frontend/src/pages/CarbonCreditDashboard.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from 'react';\nimport { useWeb3 } from '../contexts/Web3Context';\nimport EthereumAccount from '../components/EthereumAccount';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nfunction CarbonCreditDashboard() {\n  _s();\n  const [creditsIssuedList, setCreditsIssuedList] = useState([]);\n  const [transactions, setTransactions] = useState([]);\n  const [creditAmount, setCreditAmount] = useState(0);\n  const [accounts, setAccounts] = useState([]);\n  const [selectedAccount, setSelectedAccount] = useState('');\n  const [accountHolder, setAccountHolder] = useState('');\n  const [accountBalance, setAccountBalance] = useState('');\n  const {\n    web3,\n    carbonCreditContract\n  } = useWeb3();\n  useEffect(() => {\n    if (accounts != null) {\n      setSelectedAccount(accounts[0]);\n    }\n  }, [accounts]);\n  const issueCarbonCredits = async () => {\n    // In a real application, you would send a transaction to the smart contract\n    // to record the carbon credit transaction and retrieve this data from the blockchain.\n    if (!web3 || !carbonCreditContract) {\n      console.log(web3);\n      console.log(carbonCreditContract);\n      console.log('no web3 or carbonCreditContract detected');\n      return;\n    }\n    try {\n      // Convert the credit amount to the contract's required format (if needed)\n      // const creditAmountWei = etherToWei(creditAmount.toString(), 'ether');\n      console.log(accountHolder);\n      console.log(selectedAccount);\n      if (web3.utils.toChecksumAddress(accountHolder) === web3.utils.toChecksumAddress(selectedAccount)) {\n        // Send a transaction to the smart contract to record a carbon credit transaction\n        const txResult = await carbonCreditContract.methods.issueCarbonCredits(selectedAccount, creditAmount).send({\n          from: selectedAccount // Use the selected Ethereum account\n        });\n\n        console.log('Carbon credits issued:', txResult);\n      } else {\n        console.error('Only the account holder can issue carbon credits');\n      }\n      const newCreditIssue = {\n        address: selectedAccount,\n        credits: creditAmount,\n        timestamp: new Date().toLocaleString()\n      };\n      setCreditsIssuedList([...creditsIssuedList, newCreditIssue]);\n\n      // Clear the input fields\n      setCreditAmount(0);\n      setSelectedAccount(accounts[0]);\n    } catch (error) {\n      console.error('Error adding transaction', error);\n    }\n  };\n  const transferCarbonCredits = async () => {\n    try {\n      // Transfer carbon credits\n      const txResult = await carbonCreditContract.methods.transferCarbonCredits(selectedAccount, creditAmount).send({\n        from: accountHolder // Use the selected Ethereum account\n      });\n\n      console.log('Carbon credits transferred:', txResult);\n\n      // Update the UI or perform any other actions after the transaction is successful\n      const transaction = {\n        fromAddress: accountHolder,\n        toAddress: selectedAccount,\n        credits: creditAmount,\n        timestamp: new Date().toLocaleString()\n      };\n      setTransactions([...transactions, transaction]);\n\n      // Clear the input fields\n      setCreditAmount(0);\n      setSelectedAccount(accounts[0]);\n    } catch (error) {\n      console.error('Error transferring carbon credits:', error);\n    }\n  };\n  const getCreditBalance = async () => {\n    if (!web3 || !carbonCreditContract) {\n      return;\n    }\n    try {\n      const creditBalance = await carbonCreditContract.methods.getCarbonCredits(selectedAccount).call();\n      console.log('Get Credits Balance:', creditBalance);\n      setAccountBalance(creditBalance);\n    } catch (error) {\n      console.error('Error getting credit balance', error);\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"carbon-trading-app\",\n    children: [/*#__PURE__*/_jsxDEV(EthereumAccount, {\n      myAccount: accountHolder,\n      setMyAccount: setAccountHolder,\n      account: selectedAccount,\n      accounts: accounts,\n      setAccount: setSelectedAccount,\n      setAccounts: setAccounts\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 110,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"h1\", {\n      children: \"Carbon Credit Trading Dashboard\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 112,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"transaction-form\",\n      children: [/*#__PURE__*/_jsxDEV(\"label\", {\n        children: \"Select Company Account:\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 114,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"select\", {\n        type: \"text\",\n        placeholder: \"Company Name\",\n        value: selectedAccount,\n        onChange: e => setSelectedAccount(e.target.value),\n        children: accounts != null ? accounts.map(account => /*#__PURE__*/_jsxDEV(\"option\", {\n          value: account,\n          children: account\n        }, account, false, {\n          fileName: _jsxFileName,\n          lineNumber: 123,\n          columnNumber: 29\n        }, this)) : /*#__PURE__*/_jsxDEV(_Fragment, {}, void 0, false)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 115,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"number\",\n        placeholder: \"Credit Amount\",\n        value: creditAmount,\n        onChange: e => setCreditAmount(parseInt(e.target.value, 10))\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 129,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: issueCarbonCredits,\n        children: \"Issue Carbon Credits\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 135,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: getCreditBalance,\n        children: \"Get Credit Balance\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 136,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: transferCarbonCredits,\n        children: \"Transfer Credit\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 137,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 113,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"credit-list\",\n      children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n        children: \"List of Credits Issued\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 141,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"ul\", {\n        children: creditsIssuedList.map((credit, index) => /*#__PURE__*/_jsxDEV(\"li\", {\n          children: [/*#__PURE__*/_jsxDEV(\"strong\", {\n            children: \"Company:\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 145,\n            columnNumber: 29\n          }, this), \" \", credit.address, \" |\", /*#__PURE__*/_jsxDEV(\"strong\", {\n            children: \"Credits:\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 146,\n            columnNumber: 29\n          }, this), \" \", credit.credits, \" |\", /*#__PURE__*/_jsxDEV(\"strong\", {\n            children: \"Timestamp:\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 147,\n            columnNumber: 29\n          }, this), \" \", credit.timestamp]\n        }, index, true, {\n          fileName: _jsxFileName,\n          lineNumber: 144,\n          columnNumber: 25\n        }, this))\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 142,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 140,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"transaction-list\",\n      children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n        children: \"Recent Transactions \"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 153,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"ul\", {\n        children: transactions.map((transaction, index) => /*#__PURE__*/_jsxDEV(\"li\", {\n          children: [/*#__PURE__*/_jsxDEV(\"strong\", {\n            children: \"From:\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 157,\n            columnNumber: 29\n          }, this), \" \", transaction.fromAddress, \" |\", /*#__PURE__*/_jsxDEV(\"strong\", {\n            children: \"To:\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 158,\n            columnNumber: 29\n          }, this), \" \", transaction.toAddress, \" |\", /*#__PURE__*/_jsxDEV(\"strong\", {\n            children: \"Credits:\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 159,\n            columnNumber: 29\n          }, this), \" \", transaction.credits, \" |\", /*#__PURE__*/_jsxDEV(\"strong\", {\n            children: \"Timestamp:\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 160,\n            columnNumber: 29\n          }, this), \" \", transaction.timestamp]\n        }, index, true, {\n          fileName: _jsxFileName,\n          lineNumber: 156,\n          columnNumber: 25\n        }, this))\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 154,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 152,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"credit-balance\",\n      children: /*#__PURE__*/_jsxDEV(\"p\", {\n        children: [\"Credit Balance: \", accountBalance]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 166,\n        columnNumber: 17\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 165,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 109,\n    columnNumber: 9\n  }, this);\n}\n_s(CarbonCreditDashboard, \"VefduBJfWwd4RAy1+WJuZoP7O7U=\", false, function () {\n  return [useWeb3];\n});\n_c = CarbonCreditDashboard;\nexport default CarbonCreditDashboard;\nvar _c;\n$RefreshReg$(_c, \"CarbonCreditDashboard\");","map":{"version":3,"names":["React","useState","useEffect","useWeb3","EthereumAccount","jsxDEV","_jsxDEV","Fragment","_Fragment","CarbonCreditDashboard","_s","creditsIssuedList","setCreditsIssuedList","transactions","setTransactions","creditAmount","setCreditAmount","accounts","setAccounts","selectedAccount","setSelectedAccount","accountHolder","setAccountHolder","accountBalance","setAccountBalance","web3","carbonCreditContract","issueCarbonCredits","console","log","utils","toChecksumAddress","txResult","methods","send","from","error","newCreditIssue","address","credits","timestamp","Date","toLocaleString","transferCarbonCredits","transaction","fromAddress","toAddress","getCreditBalance","creditBalance","getCarbonCredits","call","className","children","myAccount","setMyAccount","account","setAccount","fileName","_jsxFileName","lineNumber","columnNumber","type","placeholder","value","onChange","e","target","map","parseInt","onClick","credit","index","_c","$RefreshReg$"],"sources":["/Applications/MAMP/htdocs/carbontradex/frontend/src/pages/CarbonCreditDashboard.js"],"sourcesContent":["import React, { useState, useEffect } from 'react';\nimport { useWeb3 } from '../contexts/Web3Context';\nimport EthereumAccount from '../components/EthereumAccount';\n\nfunction CarbonCreditDashboard() {\n    const [creditsIssuedList, setCreditsIssuedList] = useState([]);\n    const [transactions, setTransactions] = useState([]);\n    const [creditAmount, setCreditAmount] = useState(0);\n    const [accounts, setAccounts] = useState([]);\n    const [selectedAccount, setSelectedAccount] = useState('');\n    const [accountHolder, setAccountHolder] = useState('');\n    const [accountBalance, setAccountBalance] = useState('');\n    const { web3, carbonCreditContract } = useWeb3();\n\n    useEffect(() => {\n        if (accounts != null) {\n            setSelectedAccount(accounts[0])\n        }\n    }, [accounts])\n\n    const issueCarbonCredits = async () => {\n        // In a real application, you would send a transaction to the smart contract\n        // to record the carbon credit transaction and retrieve this data from the blockchain.\n        if (!web3 || !carbonCreditContract) {\n            console.log(web3);\n            console.log(carbonCreditContract);\n            console.log('no web3 or carbonCreditContract detected');\n            return;\n        }\n\n        try {\n            // Convert the credit amount to the contract's required format (if needed)\n            // const creditAmountWei = etherToWei(creditAmount.toString(), 'ether');\n            console.log(accountHolder);\n            console.log(selectedAccount);\n            if (web3.utils.toChecksumAddress(accountHolder) === web3.utils.toChecksumAddress(selectedAccount)) {\n\n                // Send a transaction to the smart contract to record a carbon credit transaction\n                const txResult = await carbonCreditContract.methods\n                    .issueCarbonCredits(selectedAccount, creditAmount)\n                    .send({\n                        from: selectedAccount, // Use the selected Ethereum account\n                    });\n\n                console.log('Carbon credits issued:', txResult);\n\n            } else {\n                console.error('Only the account holder can issue carbon credits');\n            }\n            const newCreditIssue = {\n                address: selectedAccount,\n                credits: creditAmount,\n                timestamp: new Date().toLocaleString(),\n            };\n\n            setCreditsIssuedList([...creditsIssuedList, newCreditIssue]);\n\n            // Clear the input fields\n            setCreditAmount(0);\n            setSelectedAccount(accounts[0]);\n        } catch (error) {\n            console.error('Error adding transaction', error);\n        }\n    };\n\n    const transferCarbonCredits = async () => {\n        try {\n            // Transfer carbon credits\n            const txResult = await carbonCreditContract.methods.transferCarbonCredits(selectedAccount, creditAmount).send({\n                from: accountHolder, // Use the selected Ethereum account\n            });\n\n            console.log('Carbon credits transferred:', txResult);\n\n            // Update the UI or perform any other actions after the transaction is successful\n            const transaction = {\n                fromAddress: accountHolder,\n                toAddress: selectedAccount,\n                credits: creditAmount,\n                timestamp: new Date().toLocaleString(),\n            };\n\n            setTransactions([...transactions, transaction]);\n\n            // Clear the input fields\n            setCreditAmount(0);\n            setSelectedAccount(accounts[0]);\n        } catch (error) {\n            console.error('Error transferring carbon credits:', error);\n        }\n    };\n\n    const getCreditBalance = async () => {\n        if (!web3 || !carbonCreditContract) {\n            return;\n        }\n\n        try {\n            const creditBalance = await carbonCreditContract.methods\n                .getCarbonCredits(selectedAccount)\n                .call()\n            console.log('Get Credits Balance:', creditBalance);\n            setAccountBalance(creditBalance);\n        } catch (error) {\n            console.error('Error getting credit balance', error);\n        }\n    }\n    return (\n        <div className=\"carbon-trading-app\">\n            <EthereumAccount myAccount={accountHolder} setMyAccount={setAccountHolder} account={selectedAccount} accounts={accounts} setAccount={setSelectedAccount} setAccounts={setAccounts} />\n\n            <h1>Carbon Credit Trading Dashboard</h1>\n            <div className=\"transaction-form\">\n                <label>Select Company Account:</label>\n                <select\n                    type=\"text\"\n                    placeholder=\"Company Name\"\n                    value={selectedAccount}\n                    onChange={(e) => setSelectedAccount(e.target.value)}\n                >\n                    {accounts != null ?\n                        accounts.map((account) => (\n                            <option key={account} value={account}>\n                                {account}\n                            </option>\n                        )) : <></>}\n\n                </select>\n                <input\n                    type=\"number\"\n                    placeholder=\"Credit Amount\"\n                    value={creditAmount}\n                    onChange={(e) => setCreditAmount(parseInt(e.target.value, 10))}\n                />\n                <button onClick={issueCarbonCredits}>Issue Carbon Credits</button>\n                <button onClick={getCreditBalance}>Get Credit Balance</button>\n                <button onClick={transferCarbonCredits}>Transfer Credit</button>\n\n            </div>\n            <div className=\"credit-list\">\n                <h2>List of Credits Issued</h2>\n                <ul>\n                    {creditsIssuedList.map((credit, index) => (\n                        <li key={index}>\n                            <strong>Company:</strong> {credit.address} |\n                            <strong>Credits:</strong> {credit.credits} |\n                            <strong>Timestamp:</strong> {credit.timestamp}\n                        </li>\n                    ))}\n                </ul>\n            </div>\n            <div className=\"transaction-list\">\n                <h2>Recent Transactions </h2>\n                <ul>\n                    {transactions.map((transaction, index) => (\n                        <li key={index}>\n                            <strong>From:</strong> {transaction.fromAddress} |\n                            <strong>To:</strong> {transaction.toAddress} |\n                            <strong>Credits:</strong> {transaction.credits} |\n                            <strong>Timestamp:</strong> {transaction.timestamp}\n                        </li>\n                    ))}\n                </ul>\n            </div>\n            <div className=\"credit-balance\">\n                <p>Credit Balance: {accountBalance}</p>\n            </div>\n        </div >\n    );\n}\n\nexport default CarbonCreditDashboard;"],"mappings":";;AAAA,OAAOA,KAAK,IAAIC,QAAQ,EAAEC,SAAS,QAAQ,OAAO;AAClD,SAASC,OAAO,QAAQ,yBAAyB;AACjD,OAAOC,eAAe,MAAM,+BAA+B;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAAA,SAAAC,QAAA,IAAAC,SAAA;AAE5D,SAASC,qBAAqBA,CAAA,EAAG;EAAAC,EAAA;EAC7B,MAAM,CAACC,iBAAiB,EAAEC,oBAAoB,CAAC,GAAGX,QAAQ,CAAC,EAAE,CAAC;EAC9D,MAAM,CAACY,YAAY,EAAEC,eAAe,CAAC,GAAGb,QAAQ,CAAC,EAAE,CAAC;EACpD,MAAM,CAACc,YAAY,EAAEC,eAAe,CAAC,GAAGf,QAAQ,CAAC,CAAC,CAAC;EACnD,MAAM,CAACgB,QAAQ,EAAEC,WAAW,CAAC,GAAGjB,QAAQ,CAAC,EAAE,CAAC;EAC5C,MAAM,CAACkB,eAAe,EAAEC,kBAAkB,CAAC,GAAGnB,QAAQ,CAAC,EAAE,CAAC;EAC1D,MAAM,CAACoB,aAAa,EAAEC,gBAAgB,CAAC,GAAGrB,QAAQ,CAAC,EAAE,CAAC;EACtD,MAAM,CAACsB,cAAc,EAAEC,iBAAiB,CAAC,GAAGvB,QAAQ,CAAC,EAAE,CAAC;EACxD,MAAM;IAAEwB,IAAI;IAAEC;EAAqB,CAAC,GAAGvB,OAAO,CAAC,CAAC;EAEhDD,SAAS,CAAC,MAAM;IACZ,IAAIe,QAAQ,IAAI,IAAI,EAAE;MAClBG,kBAAkB,CAACH,QAAQ,CAAC,CAAC,CAAC,CAAC;IACnC;EACJ,CAAC,EAAE,CAACA,QAAQ,CAAC,CAAC;EAEd,MAAMU,kBAAkB,GAAG,MAAAA,CAAA,KAAY;IACnC;IACA;IACA,IAAI,CAACF,IAAI,IAAI,CAACC,oBAAoB,EAAE;MAChCE,OAAO,CAACC,GAAG,CAACJ,IAAI,CAAC;MACjBG,OAAO,CAACC,GAAG,CAACH,oBAAoB,CAAC;MACjCE,OAAO,CAACC,GAAG,CAAC,0CAA0C,CAAC;MACvD;IACJ;IAEA,IAAI;MACA;MACA;MACAD,OAAO,CAACC,GAAG,CAACR,aAAa,CAAC;MAC1BO,OAAO,CAACC,GAAG,CAACV,eAAe,CAAC;MAC5B,IAAIM,IAAI,CAACK,KAAK,CAACC,iBAAiB,CAACV,aAAa,CAAC,KAAKI,IAAI,CAACK,KAAK,CAACC,iBAAiB,CAACZ,eAAe,CAAC,EAAE;QAE/F;QACA,MAAMa,QAAQ,GAAG,MAAMN,oBAAoB,CAACO,OAAO,CAC9CN,kBAAkB,CAACR,eAAe,EAAEJ,YAAY,CAAC,CACjDmB,IAAI,CAAC;UACFC,IAAI,EAAEhB,eAAe,CAAE;QAC3B,CAAC,CAAC;;QAENS,OAAO,CAACC,GAAG,CAAC,wBAAwB,EAAEG,QAAQ,CAAC;MAEnD,CAAC,MAAM;QACHJ,OAAO,CAACQ,KAAK,CAAC,kDAAkD,CAAC;MACrE;MACA,MAAMC,cAAc,GAAG;QACnBC,OAAO,EAAEnB,eAAe;QACxBoB,OAAO,EAAExB,YAAY;QACrByB,SAAS,EAAE,IAAIC,IAAI,CAAC,CAAC,CAACC,cAAc,CAAC;MACzC,CAAC;MAED9B,oBAAoB,CAAC,CAAC,GAAGD,iBAAiB,EAAE0B,cAAc,CAAC,CAAC;;MAE5D;MACArB,eAAe,CAAC,CAAC,CAAC;MAClBI,kBAAkB,CAACH,QAAQ,CAAC,CAAC,CAAC,CAAC;IACnC,CAAC,CAAC,OAAOmB,KAAK,EAAE;MACZR,OAAO,CAACQ,KAAK,CAAC,0BAA0B,EAAEA,KAAK,CAAC;IACpD;EACJ,CAAC;EAED,MAAMO,qBAAqB,GAAG,MAAAA,CAAA,KAAY;IACtC,IAAI;MACA;MACA,MAAMX,QAAQ,GAAG,MAAMN,oBAAoB,CAACO,OAAO,CAACU,qBAAqB,CAACxB,eAAe,EAAEJ,YAAY,CAAC,CAACmB,IAAI,CAAC;QAC1GC,IAAI,EAAEd,aAAa,CAAE;MACzB,CAAC,CAAC;;MAEFO,OAAO,CAACC,GAAG,CAAC,6BAA6B,EAAEG,QAAQ,CAAC;;MAEpD;MACA,MAAMY,WAAW,GAAG;QAChBC,WAAW,EAAExB,aAAa;QAC1ByB,SAAS,EAAE3B,eAAe;QAC1BoB,OAAO,EAAExB,YAAY;QACrByB,SAAS,EAAE,IAAIC,IAAI,CAAC,CAAC,CAACC,cAAc,CAAC;MACzC,CAAC;MAED5B,eAAe,CAAC,CAAC,GAAGD,YAAY,EAAE+B,WAAW,CAAC,CAAC;;MAE/C;MACA5B,eAAe,CAAC,CAAC,CAAC;MAClBI,kBAAkB,CAACH,QAAQ,CAAC,CAAC,CAAC,CAAC;IACnC,CAAC,CAAC,OAAOmB,KAAK,EAAE;MACZR,OAAO,CAACQ,KAAK,CAAC,oCAAoC,EAAEA,KAAK,CAAC;IAC9D;EACJ,CAAC;EAED,MAAMW,gBAAgB,GAAG,MAAAA,CAAA,KAAY;IACjC,IAAI,CAACtB,IAAI,IAAI,CAACC,oBAAoB,EAAE;MAChC;IACJ;IAEA,IAAI;MACA,MAAMsB,aAAa,GAAG,MAAMtB,oBAAoB,CAACO,OAAO,CACnDgB,gBAAgB,CAAC9B,eAAe,CAAC,CACjC+B,IAAI,CAAC,CAAC;MACXtB,OAAO,CAACC,GAAG,CAAC,sBAAsB,EAAEmB,aAAa,CAAC;MAClDxB,iBAAiB,CAACwB,aAAa,CAAC;IACpC,CAAC,CAAC,OAAOZ,KAAK,EAAE;MACZR,OAAO,CAACQ,KAAK,CAAC,8BAA8B,EAAEA,KAAK,CAAC;IACxD;EACJ,CAAC;EACD,oBACI9B,OAAA;IAAK6C,SAAS,EAAC,oBAAoB;IAAAC,QAAA,gBAC/B9C,OAAA,CAACF,eAAe;MAACiD,SAAS,EAAEhC,aAAc;MAACiC,YAAY,EAAEhC,gBAAiB;MAACiC,OAAO,EAAEpC,eAAgB;MAACF,QAAQ,EAAEA,QAAS;MAACuC,UAAU,EAAEpC,kBAAmB;MAACF,WAAW,EAAEA;IAAY;MAAAuC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAE,CAAC,eAErLtD,OAAA;MAAA8C,QAAA,EAAI;IAA+B;MAAAK,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAI,CAAC,eACxCtD,OAAA;MAAK6C,SAAS,EAAC,kBAAkB;MAAAC,QAAA,gBAC7B9C,OAAA;QAAA8C,QAAA,EAAO;MAAuB;QAAAK,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAO,CAAC,eACtCtD,OAAA;QACIuD,IAAI,EAAC,MAAM;QACXC,WAAW,EAAC,cAAc;QAC1BC,KAAK,EAAE5C,eAAgB;QACvB6C,QAAQ,EAAGC,CAAC,IAAK7C,kBAAkB,CAAC6C,CAAC,CAACC,MAAM,CAACH,KAAK,CAAE;QAAAX,QAAA,EAEnDnC,QAAQ,IAAI,IAAI,GACbA,QAAQ,CAACkD,GAAG,CAAEZ,OAAO,iBACjBjD,OAAA;UAAsByD,KAAK,EAAER,OAAQ;UAAAH,QAAA,EAChCG;QAAO,GADCA,OAAO;UAAAE,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAEZ,CACX,CAAC,gBAAGtD,OAAA,CAAAE,SAAA,mBAAI;MAAC;QAAAiD,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAEV,CAAC,eACTtD,OAAA;QACIuD,IAAI,EAAC,QAAQ;QACbC,WAAW,EAAC,eAAe;QAC3BC,KAAK,EAAEhD,YAAa;QACpBiD,QAAQ,EAAGC,CAAC,IAAKjD,eAAe,CAACoD,QAAQ,CAACH,CAAC,CAACC,MAAM,CAACH,KAAK,EAAE,EAAE,CAAC;MAAE;QAAAN,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAClE,CAAC,eACFtD,OAAA;QAAQ+D,OAAO,EAAE1C,kBAAmB;QAAAyB,QAAA,EAAC;MAAoB;QAAAK,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAQ,CAAC,eAClEtD,OAAA;QAAQ+D,OAAO,EAAEtB,gBAAiB;QAAAK,QAAA,EAAC;MAAkB;QAAAK,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAQ,CAAC,eAC9DtD,OAAA;QAAQ+D,OAAO,EAAE1B,qBAAsB;QAAAS,QAAA,EAAC;MAAe;QAAAK,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAQ,CAAC;IAAA;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAE/D,CAAC,eACNtD,OAAA;MAAK6C,SAAS,EAAC,aAAa;MAAAC,QAAA,gBACxB9C,OAAA;QAAA8C,QAAA,EAAI;MAAsB;QAAAK,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAI,CAAC,eAC/BtD,OAAA;QAAA8C,QAAA,EACKzC,iBAAiB,CAACwD,GAAG,CAAC,CAACG,MAAM,EAAEC,KAAK,kBACjCjE,OAAA;UAAA8C,QAAA,gBACI9C,OAAA;YAAA8C,QAAA,EAAQ;UAAQ;YAAAK,QAAA,EAAAC,YAAA;YAAAC,UAAA;YAAAC,YAAA;UAAA,OAAQ,CAAC,KAAC,EAACU,MAAM,CAAChC,OAAO,EAAC,IAC1C,eAAAhC,OAAA;YAAA8C,QAAA,EAAQ;UAAQ;YAAAK,QAAA,EAAAC,YAAA;YAAAC,UAAA;YAAAC,YAAA;UAAA,OAAQ,CAAC,KAAC,EAACU,MAAM,CAAC/B,OAAO,EAAC,IAC1C,eAAAjC,OAAA;YAAA8C,QAAA,EAAQ;UAAU;YAAAK,QAAA,EAAAC,YAAA;YAAAC,UAAA;YAAAC,YAAA;UAAA,OAAQ,CAAC,KAAC,EAACU,MAAM,CAAC9B,SAAS;QAAA,GAHxC+B,KAAK;UAAAd,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAIV,CACP;MAAC;QAAAH,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OACF,CAAC;IAAA;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OACJ,CAAC,eACNtD,OAAA;MAAK6C,SAAS,EAAC,kBAAkB;MAAAC,QAAA,gBAC7B9C,OAAA;QAAA8C,QAAA,EAAI;MAAoB;QAAAK,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAI,CAAC,eAC7BtD,OAAA;QAAA8C,QAAA,EACKvC,YAAY,CAACsD,GAAG,CAAC,CAACvB,WAAW,EAAE2B,KAAK,kBACjCjE,OAAA;UAAA8C,QAAA,gBACI9C,OAAA;YAAA8C,QAAA,EAAQ;UAAK;YAAAK,QAAA,EAAAC,YAAA;YAAAC,UAAA;YAAAC,YAAA;UAAA,OAAQ,CAAC,KAAC,EAAChB,WAAW,CAACC,WAAW,EAAC,IAChD,eAAAvC,OAAA;YAAA8C,QAAA,EAAQ;UAAG;YAAAK,QAAA,EAAAC,YAAA;YAAAC,UAAA;YAAAC,YAAA;UAAA,OAAQ,CAAC,KAAC,EAAChB,WAAW,CAACE,SAAS,EAAC,IAC5C,eAAAxC,OAAA;YAAA8C,QAAA,EAAQ;UAAQ;YAAAK,QAAA,EAAAC,YAAA;YAAAC,UAAA;YAAAC,YAAA;UAAA,OAAQ,CAAC,KAAC,EAAChB,WAAW,CAACL,OAAO,EAAC,IAC/C,eAAAjC,OAAA;YAAA8C,QAAA,EAAQ;UAAU;YAAAK,QAAA,EAAAC,YAAA;YAAAC,UAAA;YAAAC,YAAA;UAAA,OAAQ,CAAC,KAAC,EAAChB,WAAW,CAACJ,SAAS;QAAA,GAJ7C+B,KAAK;UAAAd,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAKV,CACP;MAAC;QAAAH,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OACF,CAAC;IAAA;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OACJ,CAAC,eACNtD,OAAA;MAAK6C,SAAS,EAAC,gBAAgB;MAAAC,QAAA,eAC3B9C,OAAA;QAAA8C,QAAA,GAAG,kBAAgB,EAAC7B,cAAc;MAAA;QAAAkC,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAI;IAAC;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OACtC,CAAC;EAAA;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACJ,CAAC;AAEf;AAAClD,EAAA,CArKQD,qBAAqB;EAAA,QAQaN,OAAO;AAAA;AAAAqE,EAAA,GARzC/D,qBAAqB;AAuK9B,eAAeA,qBAAqB;AAAC,IAAA+D,EAAA;AAAAC,YAAA,CAAAD,EAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}