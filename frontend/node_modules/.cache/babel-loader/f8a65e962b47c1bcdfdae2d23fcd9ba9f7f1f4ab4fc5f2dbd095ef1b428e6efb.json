{"ast":null,"code":"var _jsxFileName = \"/Applications/MAMP/htdocs/carbontradex/frontend/src/pages/CarbonCreditDashboard.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from 'react';\nimport web3 from '../utils/getWeb3';\nimport carbonCreditContract from '../contracts/artifacts/CarbonCredit.json';\nimport EthereumAccount from '../components/EthereumAccount';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nfunction CarbonCreditDashboard() {\n  _s();\n  const [transactions, setTransactions] = useState([]);\n  const [selectedAccount, setSelectedAccount] = useState('');\n  const [companyName, setCompanyName] = useState('');\n  const [creditAmount, setCreditAmount] = useState(0);\n  const [accounts, setAccounts] = useState([]);\n  const [accountBalance, setAccountBalance] = useState('');\n  const etherToWei = ether => {\n    return ether * 10 ** 18;\n  };\n  useEffect(() => {\n    const contractInstance = new web3Instance.eth.Contract(carbonCreditContract.abi,\n    // Make sure your contract ABI is accessible here.\n    deployedNetwork && deployedNetwork.address);\n  });\n  const addTransaction = async () => {\n    // In a real application, you would send a transaction to the smart contract\n    // to record the carbon credit transaction and retrieve this data from the blockchain.\n    if (!web3 || !carbonCreditContract) {\n      return;\n    }\n    try {\n      // Convert the credit amount to the contract's required format (if needed)\n      const creditAmountWei = etherToWei(creditAmount.toString(), 'ether');\n      // Send a transaction to the smart contract to record a carbon credit transaction\n      const txResult = await carbonCreditContract.methods.issueCarbonCredits(selectedAccount, creditAmountWei).send({\n        from: selectedAccount // Use the selected Ethereum account\n      });\n\n      console.log('Transaction successful:', txResult);\n      const newTransaction = {\n        company: companyName,\n        credits: creditAmount,\n        timestamp: new Date().toLocaleString()\n      };\n      setTransactions([...transactions, newTransaction]);\n\n      // Clear the input fields\n      setCompanyName('');\n      setCreditAmount(0);\n    } catch (error) {\n      console.error('Error adding transaction', error);\n    }\n  };\n  const getCreditBalance = async () => {\n    if (!web3 || !carbonCreditContract) {\n      return;\n    }\n    try {\n      const creditBalance = await carbonCreditContract.methods.getCarbonCredits(selectedAccount).call();\n      console.log('Get Credits Balance:', creditBalance);\n      setAccountBalance(creditBalance);\n    } catch (error) {\n      console.error('Error getting credit balance', error);\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"carbon-trading-app\",\n    children: [/*#__PURE__*/_jsxDEV(EthereumAccount, {\n      account: selectedAccount,\n      accounts: accounts,\n      setAccount: setSelectedAccount,\n      setAccounts: setAccounts\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 77,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"h1\", {\n      children: \"Carbon Credit Trading Dashboard\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 79,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"transaction-form\",\n      children: [/*#__PURE__*/_jsxDEV(\"label\", {\n        children: \"Select Company Account:\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 81,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"select\", {\n        type: \"text\",\n        placeholder: \"Company Name\",\n        value: selectedAccount,\n        onChange: e => setSelectedAccount(e.target.value),\n        children: accounts != null ? accounts.map(account => /*#__PURE__*/_jsxDEV(\"option\", {\n          value: account,\n          children: account\n        }, account, false, {\n          fileName: _jsxFileName,\n          lineNumber: 90,\n          columnNumber: 29\n        }, this)) : /*#__PURE__*/_jsxDEV(_Fragment, {}, void 0, false)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 82,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"number\",\n        placeholder: \"Credit Amount\",\n        value: creditAmount,\n        onChange: e => setCreditAmount(parseInt(e.target.value, 10))\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 96,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: addTransaction,\n        children: \"Add Transaction\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 102,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: getCreditBalance,\n        children: \"Get Credit Balance\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 103,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 80,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"transaction-list\",\n      children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n        children: \"Recent Transactions\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 106,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"ul\", {\n        children: transactions.map((transaction, index) => /*#__PURE__*/_jsxDEV(\"li\", {\n          children: [/*#__PURE__*/_jsxDEV(\"strong\", {\n            children: \"Company:\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 110,\n            columnNumber: 29\n          }, this), \" \", transaction.company, \" |\", /*#__PURE__*/_jsxDEV(\"strong\", {\n            children: \"Credits:\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 111,\n            columnNumber: 29\n          }, this), \" \", transaction.credits, \" |\", /*#__PURE__*/_jsxDEV(\"strong\", {\n            children: \"Timestamp:\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 112,\n            columnNumber: 29\n          }, this), \" \", transaction.timestamp]\n        }, index, true, {\n          fileName: _jsxFileName,\n          lineNumber: 109,\n          columnNumber: 25\n        }, this))\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 107,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 105,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"credit-balance\",\n      children: /*#__PURE__*/_jsxDEV(\"p\", {\n        children: [\"Credit Balance: \", accountBalance]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 118,\n        columnNumber: 17\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 117,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 76,\n    columnNumber: 9\n  }, this);\n}\n_s(CarbonCreditDashboard, \"FGV1M3wBUO7czQJRWDDakTDiLrU=\");\n_c = CarbonCreditDashboard;\nexport default CarbonCreditDashboard;\nvar _c;\n$RefreshReg$(_c, \"CarbonCreditDashboard\");","map":{"version":3,"names":["React","useState","useEffect","web3","carbonCreditContract","EthereumAccount","jsxDEV","_jsxDEV","Fragment","_Fragment","CarbonCreditDashboard","_s","transactions","setTransactions","selectedAccount","setSelectedAccount","companyName","setCompanyName","creditAmount","setCreditAmount","accounts","setAccounts","accountBalance","setAccountBalance","etherToWei","ether","contractInstance","web3Instance","eth","Contract","abi","deployedNetwork","address","addTransaction","creditAmountWei","toString","txResult","methods","issueCarbonCredits","send","from","console","log","newTransaction","company","credits","timestamp","Date","toLocaleString","error","getCreditBalance","creditBalance","getCarbonCredits","call","className","children","account","setAccount","fileName","_jsxFileName","lineNumber","columnNumber","type","placeholder","value","onChange","e","target","map","parseInt","onClick","transaction","index","_c","$RefreshReg$"],"sources":["/Applications/MAMP/htdocs/carbontradex/frontend/src/pages/CarbonCreditDashboard.js"],"sourcesContent":["import React, { useState, useEffect } from 'react';\nimport web3 from '../utils/getWeb3';\nimport carbonCreditContract from '../contracts/artifacts/CarbonCredit.json'\nimport EthereumAccount from '../components/EthereumAccount';\n\nfunction CarbonCreditDashboard() {\n    const [transactions, setTransactions] = useState([]);\n    const [selectedAccount, setSelectedAccount] = useState('');\n    const [companyName, setCompanyName] = useState('');\n    const [creditAmount, setCreditAmount] = useState(0);\n    const [accounts, setAccounts] = useState([]);\n    const [accountBalance, setAccountBalance] = useState('');\n\n    const etherToWei = (ether) => {\n        return ether * 10 ** 18;\n    }\n\n    useEffect(() => {\n        const contractInstance = new web3Instance.eth.Contract(\n            carbonCreditContract.abi, // Make sure your contract ABI is accessible here.\n            deployedNetwork && deployedNetwork.address\n        );\n\n    })\n    const addTransaction = async () => {\n        // In a real application, you would send a transaction to the smart contract\n        // to record the carbon credit transaction and retrieve this data from the blockchain.\n        if (!web3 || !carbonCreditContract) {\n            return;\n        }\n\n        try {\n            // Convert the credit amount to the contract's required format (if needed)\n            const creditAmountWei = etherToWei(creditAmount.toString(), 'ether');\n            // Send a transaction to the smart contract to record a carbon credit transaction\n            const txResult = await carbonCreditContract.methods\n                .issueCarbonCredits(selectedAccount, creditAmountWei)\n                .send({\n                    from: selectedAccount, // Use the selected Ethereum account\n                });\n\n            console.log('Transaction successful:', txResult);\n\n            const newTransaction = {\n                company: companyName,\n                credits: creditAmount,\n                timestamp: new Date().toLocaleString(),\n            };\n\n            setTransactions([...transactions, newTransaction]);\n\n            // Clear the input fields\n            setCompanyName('');\n            setCreditAmount(0);\n        } catch (error) {\n            console.error('Error adding transaction', error);\n        }\n    };\n\n    const getCreditBalance = async () => {\n        if (!web3 || !carbonCreditContract) {\n            return;\n        }\n\n        try {\n            const creditBalance = await carbonCreditContract.methods\n                .getCarbonCredits(selectedAccount)\n                .call()\n            console.log('Get Credits Balance:', creditBalance);\n            setAccountBalance(creditBalance);\n        } catch (error) {\n            console.error('Error getting credit balance', error);\n        }\n    }\n    return (\n        <div className=\"carbon-trading-app\">\n            <EthereumAccount account={selectedAccount} accounts={accounts} setAccount={setSelectedAccount} setAccounts={setAccounts} />\n\n            <h1>Carbon Credit Trading Dashboard</h1>\n            <div className=\"transaction-form\">\n                <label>Select Company Account:</label>\n                <select\n                    type=\"text\"\n                    placeholder=\"Company Name\"\n                    value={selectedAccount}\n                    onChange={(e) => setSelectedAccount(e.target.value)}\n                >\n                    {accounts != null ?\n                        accounts.map((account) => (\n                            <option key={account} value={account}>\n                                {account}\n                            </option>\n                        )) : <></>}\n\n                </select>\n                <input\n                    type=\"number\"\n                    placeholder=\"Credit Amount\"\n                    value={creditAmount}\n                    onChange={(e) => setCreditAmount(parseInt(e.target.value, 10))}\n                />\n                <button onClick={addTransaction}>Add Transaction</button>\n                <button onClick={getCreditBalance}>Get Credit Balance</button>\n            </div>\n            <div className=\"transaction-list\">\n                <h2>Recent Transactions</h2>\n                <ul>\n                    {transactions.map((transaction, index) => (\n                        <li key={index}>\n                            <strong>Company:</strong> {transaction.company} |\n                            <strong>Credits:</strong> {transaction.credits} |\n                            <strong>Timestamp:</strong> {transaction.timestamp}\n                        </li>\n                    ))}\n                </ul>\n            </div>\n            <div className=\"credit-balance\">\n                <p>Credit Balance: {accountBalance}</p>\n            </div>\n        </div >\n    );\n}\n\nexport default CarbonCreditDashboard;"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}