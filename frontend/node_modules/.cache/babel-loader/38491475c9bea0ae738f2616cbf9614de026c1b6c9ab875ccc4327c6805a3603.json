{"ast":null,"code":"var _jsxFileName = \"/Applications/MAMP/htdocs/carbontradex/frontend/src/App.js\",\n  _s = $RefreshSig$();\n// import logo from './logo.svg';\nimport React, { useEffect, useState } from 'react';\nimport './App.css';\nimport getWeb3 from './utils/getWeb3';\nimport CarbonCreditDashboard from './pages/CarbonCreditDashboard';\nimport CarbonCredit from './contracts/artifacts/';\nimport UserPage from './pages/UserPage.js';\n// import EthereumAccount from './components/EthereumAccount';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nfunction App() {\n  _s();\n  const [web3, setWeb3] = useState(null);\n  const [carbonCreditContract, setCarbonCreditContract] = useState(null);\n  useEffect(() => {\n    window.addEventListener('DOMContentLoaded', initializeWeb3);\n  }, []);\n  const initializeWeb3 = async () => {\n    try {\n      const web3Instance = await getWeb3();\n      const networkId = await web3Instance.eth.net.getId();\n      console.log('Network ID:', networkId);\n      const deployedNetwork = CarbonCredit.networks[networkId];\n      const contractInstance = new web3Instance.eth.Contract(CarbonCredit.abi, deployedNetwork && deployedNetwork.address);\n      console.log(\"test\");\n      console.log(web3Instance);\n      setWeb3(web3Instance);\n      setCarbonCreditContract(contractInstance);\n      console.log('Web3 and contract instances are available:', web3Instance, contractInstance);\n    } catch (error) {\n      console.error('Error connecting to Web3', error);\n    }\n  };\n\n  // initializeWeb3();\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: [/*#__PURE__*/_jsxDEV(CarbonCreditDashboard, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 43,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(UserPage, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 44,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true);\n}\n_s(App, \"pDiAVkpWBdHEL62Q1wd6oDf11M0=\");\n_c = App;\nexport default App;\nvar _c;\n$RefreshReg$(_c, \"App\");","map":{"version":3,"names":["React","useEffect","useState","getWeb3","CarbonCreditDashboard","CarbonCredit","UserPage","jsxDEV","_jsxDEV","Fragment","_Fragment","App","_s","web3","setWeb3","carbonCreditContract","setCarbonCreditContract","window","addEventListener","initializeWeb3","web3Instance","networkId","eth","net","getId","console","log","deployedNetwork","networks","contractInstance","Contract","abi","address","error","children","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["/Applications/MAMP/htdocs/carbontradex/frontend/src/App.js"],"sourcesContent":["// import logo from './logo.svg';\nimport React, { useEffect, useState } from 'react';\nimport './App.css';\nimport getWeb3 from './utils/getWeb3';\nimport CarbonCreditDashboard from './pages/CarbonCreditDashboard'\nimport CarbonCredit from './contracts/artifacts/'\nimport UserPage from './pages/UserPage.js'\n// import EthereumAccount from './components/EthereumAccount';\nfunction App() {\n  const [web3, setWeb3] = useState(null);\n  const [carbonCreditContract, setCarbonCreditContract] = useState(null);\n\n  useEffect(() => {\n    window.addEventListener('DOMContentLoaded', initializeWeb3);\n  }, []);\n\n  const initializeWeb3 = async () => {\n    try {\n      const web3Instance = await getWeb3();\n      const networkId = await web3Instance.eth.net.getId();\n      console.log('Network ID:', networkId);\n\n      const deployedNetwork = CarbonCredit.networks[networkId];\n      const contractInstance = new web3Instance.eth.Contract(\n        CarbonCredit.abi,\n        deployedNetwork && deployedNetwork.address\n      );\n      console.log(\"test\");\n      console.log(web3Instance);\n      setWeb3(web3Instance);\n\n      setCarbonCreditContract(contractInstance);\n      console.log('Web3 and contract instances are available:', web3Instance, contractInstance);\n    } catch (error) {\n      console.error('Error connecting to Web3', error);\n    }\n  };\n\n  // initializeWeb3();\n  return (\n    <>\n      {/* <EthereumAccount /> */}\n      <CarbonCreditDashboard />\n      <UserPage />\n    </>\n  );\n}\n\nexport default App;\n"],"mappings":";;AAAA;AACA,OAAOA,KAAK,IAAIC,SAAS,EAAEC,QAAQ,QAAQ,OAAO;AAClD,OAAO,WAAW;AAClB,OAAOC,OAAO,MAAM,iBAAiB;AACrC,OAAOC,qBAAqB,MAAM,+BAA+B;AACjE,OAAOC,YAAY,MAAM,wBAAwB;AACjD,OAAOC,QAAQ,MAAM,qBAAqB;AAC1C;AAAA,SAAAC,MAAA,IAAAC,OAAA;AAAA,SAAAC,QAAA,IAAAC,SAAA;AACA,SAASC,GAAGA,CAAA,EAAG;EAAAC,EAAA;EACb,MAAM,CAACC,IAAI,EAAEC,OAAO,CAAC,GAAGZ,QAAQ,CAAC,IAAI,CAAC;EACtC,MAAM,CAACa,oBAAoB,EAAEC,uBAAuB,CAAC,GAAGd,QAAQ,CAAC,IAAI,CAAC;EAEtED,SAAS,CAAC,MAAM;IACdgB,MAAM,CAACC,gBAAgB,CAAC,kBAAkB,EAAEC,cAAc,CAAC;EAC7D,CAAC,EAAE,EAAE,CAAC;EAEN,MAAMA,cAAc,GAAG,MAAAA,CAAA,KAAY;IACjC,IAAI;MACF,MAAMC,YAAY,GAAG,MAAMjB,OAAO,CAAC,CAAC;MACpC,MAAMkB,SAAS,GAAG,MAAMD,YAAY,CAACE,GAAG,CAACC,GAAG,CAACC,KAAK,CAAC,CAAC;MACpDC,OAAO,CAACC,GAAG,CAAC,aAAa,EAAEL,SAAS,CAAC;MAErC,MAAMM,eAAe,GAAGtB,YAAY,CAACuB,QAAQ,CAACP,SAAS,CAAC;MACxD,MAAMQ,gBAAgB,GAAG,IAAIT,YAAY,CAACE,GAAG,CAACQ,QAAQ,CACpDzB,YAAY,CAAC0B,GAAG,EAChBJ,eAAe,IAAIA,eAAe,CAACK,OACrC,CAAC;MACDP,OAAO,CAACC,GAAG,CAAC,MAAM,CAAC;MACnBD,OAAO,CAACC,GAAG,CAACN,YAAY,CAAC;MACzBN,OAAO,CAACM,YAAY,CAAC;MAErBJ,uBAAuB,CAACa,gBAAgB,CAAC;MACzCJ,OAAO,CAACC,GAAG,CAAC,4CAA4C,EAAEN,YAAY,EAAES,gBAAgB,CAAC;IAC3F,CAAC,CAAC,OAAOI,KAAK,EAAE;MACdR,OAAO,CAACQ,KAAK,CAAC,0BAA0B,EAAEA,KAAK,CAAC;IAClD;EACF,CAAC;;EAED;EACA,oBACEzB,OAAA,CAAAE,SAAA;IAAAwB,QAAA,gBAEE1B,OAAA,CAACJ,qBAAqB;MAAA+B,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAE,CAAC,eACzB9B,OAAA,CAACF,QAAQ;MAAA6B,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAE,CAAC;EAAA,eACZ,CAAC;AAEP;AAAC1B,EAAA,CAtCQD,GAAG;AAAA4B,EAAA,GAAH5B,GAAG;AAwCZ,eAAeA,GAAG;AAAC,IAAA4B,EAAA;AAAAC,YAAA,CAAAD,EAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}